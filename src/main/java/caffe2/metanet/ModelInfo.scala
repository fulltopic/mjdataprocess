// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.metanet

@SerialVersionUID(0L)
final case class ModelInfo(
    project: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    modelClass: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    version: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    predictorType: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    modelId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ModelInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (project.isDefined) {
        val __value = project.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (modelClass.isDefined) {
        val __value = modelClass.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (version.isDefined) {
        val __value = version.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (predictorType.isDefined) {
        val __value = predictorType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      if (modelId.isDefined) {
        val __value = modelId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      project.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      modelClass.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      version.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      predictorType.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      modelId.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getProject: _root_.scala.Predef.String = project.getOrElse("")
    def clearProject: ModelInfo = copy(project = _root_.scala.None)
    def withProject(__v: _root_.scala.Predef.String): ModelInfo = copy(project = Option(__v))
    def getModelClass: _root_.scala.Predef.String = modelClass.getOrElse("")
    def clearModelClass: ModelInfo = copy(modelClass = _root_.scala.None)
    def withModelClass(__v: _root_.scala.Predef.String): ModelInfo = copy(modelClass = Option(__v))
    def getVersion: _root_.scala.Predef.String = version.getOrElse("")
    def clearVersion: ModelInfo = copy(version = _root_.scala.None)
    def withVersion(__v: _root_.scala.Predef.String): ModelInfo = copy(version = Option(__v))
    def getPredictorType: _root_.scala.Predef.String = predictorType.getOrElse("SINGLE_PREDICTOR")
    def clearPredictorType: ModelInfo = copy(predictorType = _root_.scala.None)
    def withPredictorType(__v: _root_.scala.Predef.String): ModelInfo = copy(predictorType = Option(__v))
    def getModelId: _root_.scala.Predef.String = modelId.getOrElse("")
    def clearModelId: ModelInfo = copy(modelId = _root_.scala.None)
    def withModelId(__v: _root_.scala.Predef.String): ModelInfo = copy(modelId = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => project.orNull
        case 2 => modelClass.orNull
        case 3 => version.orNull
        case 4 => predictorType.orNull
        case 5 => modelId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => project.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => modelClass.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => version.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => predictorType.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => modelId.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.metanet.ModelInfo
    // @@protoc_insertion_point(GeneratedMessage[caffe2.ModelInfo])
}

object ModelInfo extends scalapb.GeneratedMessageCompanion[caffe2.metanet.ModelInfo] with scalapb.HasBuilder[caffe2.metanet.ModelInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.metanet.ModelInfo] with scalapb.HasBuilder[caffe2.metanet.ModelInfo] = this
  def merge(`_message__`: caffe2.metanet.ModelInfo, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.metanet.ModelInfo = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.metanet.ModelInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.metanet.ModelInfo(
        project = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        modelClass = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        predictorType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        modelId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetanetProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetanetProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.metanet.ModelInfo(
    project = _root_.scala.None,
    modelClass = _root_.scala.None,
    version = _root_.scala.None,
    predictorType = _root_.scala.None,
    modelId = _root_.scala.None
  )
  final class Builder private (
    private var __project: _root_.scala.Option[_root_.scala.Predef.String],
    private var __modelClass: _root_.scala.Option[_root_.scala.Predef.String],
    private var __version: _root_.scala.Option[_root_.scala.Predef.String],
    private var __predictorType: _root_.scala.Option[_root_.scala.Predef.String],
    private var __modelId: _root_.scala.Option[_root_.scala.Predef.String],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.metanet.ModelInfo] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __project = Option(_input__.readStringRequireUtf8())
          case 18 =>
            __modelClass = Option(_input__.readStringRequireUtf8())
          case 26 =>
            __version = Option(_input__.readStringRequireUtf8())
          case 34 =>
            __predictorType = Option(_input__.readStringRequireUtf8())
          case 42 =>
            __modelId = Option(_input__.readStringRequireUtf8())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.metanet.ModelInfo = {
      caffe2.metanet.ModelInfo(
        project = __project,
        modelClass = __modelClass,
        version = __version,
        predictorType = __predictorType,
        modelId = __modelId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.metanet.ModelInfo, caffe2.metanet.ModelInfo.Builder] {
    def apply(): Builder = new Builder(
      __project = _root_.scala.None,
      __modelClass = _root_.scala.None,
      __version = _root_.scala.None,
      __predictorType = _root_.scala.None,
      __modelId = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.metanet.ModelInfo): Builder = new Builder(
        __project = _message__.project,
        __modelClass = _message__.modelClass,
        __version = _message__.version,
        __predictorType = _message__.predictorType,
        __modelId = _message__.modelId,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.metanet.ModelInfo.Builder()
  def newBuilder(`_message__`: caffe2.metanet.ModelInfo): Builder = caffe2.metanet.ModelInfo.Builder(_message__)
  implicit class ModelInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.metanet.ModelInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.metanet.ModelInfo](_l) {
    def project: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getProject)((c_, f_) => c_.copy(project = Option(f_)))
    def optionalProject: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.project)((c_, f_) => c_.copy(project = f_))
    def modelClass: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getModelClass)((c_, f_) => c_.copy(modelClass = Option(f_)))
    def optionalModelClass: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.modelClass)((c_, f_) => c_.copy(modelClass = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getVersion)((c_, f_) => c_.copy(version = Option(f_)))
    def optionalVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def predictorType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPredictorType)((c_, f_) => c_.copy(predictorType = Option(f_)))
    def optionalPredictorType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.predictorType)((c_, f_) => c_.copy(predictorType = f_))
    def modelId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getModelId)((c_, f_) => c_.copy(modelId = Option(f_)))
    def optionalModelId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.modelId)((c_, f_) => c_.copy(modelId = f_))
  }
  final val PROJECT_FIELD_NUMBER = 1
  final val MODELCLASS_FIELD_NUMBER = 2
  final val VERSION_FIELD_NUMBER = 3
  final val PREDICTORTYPE_FIELD_NUMBER = 4
  final val MODELID_FIELD_NUMBER = 5
  def of(
    project: _root_.scala.Option[_root_.scala.Predef.String],
    modelClass: _root_.scala.Option[_root_.scala.Predef.String],
    version: _root_.scala.Option[_root_.scala.Predef.String],
    predictorType: _root_.scala.Option[_root_.scala.Predef.String],
    modelId: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.caffe2.metanet.ModelInfo = _root_.caffe2.metanet.ModelInfo(
    project,
    modelClass,
    version,
    predictorType,
    modelId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.ModelInfo])
}
