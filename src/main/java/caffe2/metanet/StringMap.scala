// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.metanet

@SerialVersionUID(0L)
final case class StringMap(
    key: _root_.scala.Predef.String,
    value: _root_.scala.Predef.String,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StringMap] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      
      {
        val __value = value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = key
        _output__.writeString(1, __v)
      };
      
      {
        val __v = value
        _output__.writeString(2, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withKey(__v: _root_.scala.Predef.String): StringMap = copy(key = __v)
    def withValue(__v: _root_.scala.Predef.String): StringMap = copy(value = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => key
        case 2 => value
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(key)
        case 2 => _root_.scalapb.descriptors.PString(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.metanet.StringMap
    // @@protoc_insertion_point(GeneratedMessage[caffe2.StringMap])
}

object StringMap extends scalapb.GeneratedMessageCompanion[caffe2.metanet.StringMap] with scalapb.HasBuilder[caffe2.metanet.StringMap] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.metanet.StringMap] with scalapb.HasBuilder[caffe2.metanet.StringMap] = this
  def merge(`_message__`: caffe2.metanet.StringMap, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.metanet.StringMap = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.metanet.StringMap] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.metanet.StringMap(
        key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Predef.String]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetanetProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetanetProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.metanet.StringMap(
    key = "",
    value = ""
  )
  final class Builder private (
    private var __key: _root_.scala.Predef.String,
    private var __value: _root_.scala.Predef.String,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.metanet.StringMap] {
    private var __requiredFields0: _root_.scala.Long = 0x3L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __value = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.metanet.StringMap = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      caffe2.metanet.StringMap(
        key = __key,
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.metanet.StringMap, caffe2.metanet.StringMap.Builder] {
    def apply(): Builder = new Builder(
      __key = "",
      __value = "",
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.metanet.StringMap): Builder = new Builder(
        __key = _message__.key,
        __value = _message__.value,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.metanet.StringMap.Builder()
  def newBuilder(`_message__`: caffe2.metanet.StringMap): Builder = caffe2.metanet.StringMap.Builder(_message__)
  implicit class StringMapLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.metanet.StringMap]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.metanet.StringMap](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val VALUE_FIELD_NUMBER = 2
  def of(
    key: _root_.scala.Predef.String,
    value: _root_.scala.Predef.String
  ): _root_.caffe2.metanet.StringMap = _root_.caffe2.metanet.StringMap(
    key,
    value
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.StringMap])
}
