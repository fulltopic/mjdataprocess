// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.metanet

/** @param nets
  *   Text-format serialized NetDefs.
  * @param modelInfo
  *   Info about where the model comes from. Possible use cases:
  *   1) sanity check or diagnose
  *   2) provide info for evaluation.
  */
@SerialVersionUID(0L)
final case class MetaNetDef(
    blobs: _root_.scala.Seq[caffe2.metanet.BlobsMap] = _root_.scala.Seq.empty,
    nets: _root_.scala.Seq[caffe2.metanet.NetsMap] = _root_.scala.Seq.empty,
    modelInfo: _root_.scala.Option[caffe2.metanet.ModelInfo] = _root_.scala.None,
    plans: _root_.scala.Seq[caffe2.metanet.PlansMap] = _root_.scala.Seq.empty,
    applicationSpecificInfo: _root_.scala.Seq[caffe2.metanet.StringMap] = _root_.scala.Seq.empty,
    blobsOrder: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    preLoadBlobs: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    tensorBoundShapes: _root_.scala.Option[caffe2.caffe2.TensorBoundShapes] = _root_.scala.None,
    requestOnlyEmbeddings: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    aotConfig: _root_.scala.Option[caffe2.caffe2.AOTConfig] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetaNetDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      blobs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      nets.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (modelInfo.isDefined) {
        val __value = modelInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      plans.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      applicationSpecificInfo.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      blobsOrder.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      preLoadBlobs.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      if (tensorBoundShapes.isDefined) {
        val __value = tensorBoundShapes.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      requestOnlyEmbeddings.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
      }
      if (aotConfig.isDefined) {
        val __value = aotConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      blobs.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      nets.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      modelInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      plans.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      applicationSpecificInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      blobsOrder.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      preLoadBlobs.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      tensorBoundShapes.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      requestOnlyEmbeddings.foreach { __v =>
        val __m = __v
        _output__.writeString(9, __m)
      };
      aotConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearBlobs = copy(blobs = _root_.scala.Seq.empty)
    def addBlobs(__vs: caffe2.metanet.BlobsMap*): MetaNetDef = addAllBlobs(__vs)
    def addAllBlobs(__vs: Iterable[caffe2.metanet.BlobsMap]): MetaNetDef = copy(blobs = blobs ++ __vs)
    def withBlobs(__v: _root_.scala.Seq[caffe2.metanet.BlobsMap]): MetaNetDef = copy(blobs = __v)
    def clearNets = copy(nets = _root_.scala.Seq.empty)
    def addNets(__vs: caffe2.metanet.NetsMap*): MetaNetDef = addAllNets(__vs)
    def addAllNets(__vs: Iterable[caffe2.metanet.NetsMap]): MetaNetDef = copy(nets = nets ++ __vs)
    def withNets(__v: _root_.scala.Seq[caffe2.metanet.NetsMap]): MetaNetDef = copy(nets = __v)
    def getModelInfo: caffe2.metanet.ModelInfo = modelInfo.getOrElse(caffe2.metanet.ModelInfo.defaultInstance)
    def clearModelInfo: MetaNetDef = copy(modelInfo = _root_.scala.None)
    def withModelInfo(__v: caffe2.metanet.ModelInfo): MetaNetDef = copy(modelInfo = Option(__v))
    def clearPlans = copy(plans = _root_.scala.Seq.empty)
    def addPlans(__vs: caffe2.metanet.PlansMap*): MetaNetDef = addAllPlans(__vs)
    def addAllPlans(__vs: Iterable[caffe2.metanet.PlansMap]): MetaNetDef = copy(plans = plans ++ __vs)
    def withPlans(__v: _root_.scala.Seq[caffe2.metanet.PlansMap]): MetaNetDef = copy(plans = __v)
    def clearApplicationSpecificInfo = copy(applicationSpecificInfo = _root_.scala.Seq.empty)
    def addApplicationSpecificInfo(__vs: caffe2.metanet.StringMap*): MetaNetDef = addAllApplicationSpecificInfo(__vs)
    def addAllApplicationSpecificInfo(__vs: Iterable[caffe2.metanet.StringMap]): MetaNetDef = copy(applicationSpecificInfo = applicationSpecificInfo ++ __vs)
    def withApplicationSpecificInfo(__v: _root_.scala.Seq[caffe2.metanet.StringMap]): MetaNetDef = copy(applicationSpecificInfo = __v)
    def clearBlobsOrder = copy(blobsOrder = _root_.scala.Seq.empty)
    def addBlobsOrder(__vs: _root_.scala.Predef.String*): MetaNetDef = addAllBlobsOrder(__vs)
    def addAllBlobsOrder(__vs: Iterable[_root_.scala.Predef.String]): MetaNetDef = copy(blobsOrder = blobsOrder ++ __vs)
    def withBlobsOrder(__v: _root_.scala.Seq[_root_.scala.Predef.String]): MetaNetDef = copy(blobsOrder = __v)
    def clearPreLoadBlobs = copy(preLoadBlobs = _root_.scala.Seq.empty)
    def addPreLoadBlobs(__vs: _root_.scala.Predef.String*): MetaNetDef = addAllPreLoadBlobs(__vs)
    def addAllPreLoadBlobs(__vs: Iterable[_root_.scala.Predef.String]): MetaNetDef = copy(preLoadBlobs = preLoadBlobs ++ __vs)
    def withPreLoadBlobs(__v: _root_.scala.Seq[_root_.scala.Predef.String]): MetaNetDef = copy(preLoadBlobs = __v)
    def getTensorBoundShapes: caffe2.caffe2.TensorBoundShapes = tensorBoundShapes.getOrElse(caffe2.caffe2.TensorBoundShapes.defaultInstance)
    def clearTensorBoundShapes: MetaNetDef = copy(tensorBoundShapes = _root_.scala.None)
    def withTensorBoundShapes(__v: caffe2.caffe2.TensorBoundShapes): MetaNetDef = copy(tensorBoundShapes = Option(__v))
    def clearRequestOnlyEmbeddings = copy(requestOnlyEmbeddings = _root_.scala.Seq.empty)
    def addRequestOnlyEmbeddings(__vs: _root_.scala.Predef.String*): MetaNetDef = addAllRequestOnlyEmbeddings(__vs)
    def addAllRequestOnlyEmbeddings(__vs: Iterable[_root_.scala.Predef.String]): MetaNetDef = copy(requestOnlyEmbeddings = requestOnlyEmbeddings ++ __vs)
    def withRequestOnlyEmbeddings(__v: _root_.scala.Seq[_root_.scala.Predef.String]): MetaNetDef = copy(requestOnlyEmbeddings = __v)
    def getAotConfig: caffe2.caffe2.AOTConfig = aotConfig.getOrElse(caffe2.caffe2.AOTConfig.defaultInstance)
    def clearAotConfig: MetaNetDef = copy(aotConfig = _root_.scala.None)
    def withAotConfig(__v: caffe2.caffe2.AOTConfig): MetaNetDef = copy(aotConfig = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => blobs
        case 2 => nets
        case 3 => modelInfo.orNull
        case 4 => plans
        case 5 => applicationSpecificInfo
        case 6 => blobsOrder
        case 7 => preLoadBlobs
        case 8 => tensorBoundShapes.orNull
        case 9 => requestOnlyEmbeddings
        case 10 => aotConfig.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(blobs.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(nets.iterator.map(_.toPMessage).toVector)
        case 3 => modelInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(plans.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(applicationSpecificInfo.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(blobsOrder.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(preLoadBlobs.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => tensorBoundShapes.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(requestOnlyEmbeddings.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 10 => aotConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.metanet.MetaNetDef
    // @@protoc_insertion_point(GeneratedMessage[caffe2.MetaNetDef])
}

object MetaNetDef extends scalapb.GeneratedMessageCompanion[caffe2.metanet.MetaNetDef] with scalapb.HasBuilder[caffe2.metanet.MetaNetDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.metanet.MetaNetDef] with scalapb.HasBuilder[caffe2.metanet.MetaNetDef] = this
  def merge(`_message__`: caffe2.metanet.MetaNetDef, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.metanet.MetaNetDef = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.metanet.MetaNetDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.metanet.MetaNetDef(
        blobs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[caffe2.metanet.BlobsMap]]).getOrElse(_root_.scala.Seq.empty),
        nets = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[caffe2.metanet.NetsMap]]).getOrElse(_root_.scala.Seq.empty),
        modelInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[caffe2.metanet.ModelInfo]]),
        plans = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[caffe2.metanet.PlansMap]]).getOrElse(_root_.scala.Seq.empty),
        applicationSpecificInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[caffe2.metanet.StringMap]]).getOrElse(_root_.scala.Seq.empty),
        blobsOrder = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        preLoadBlobs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        tensorBoundShapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[caffe2.caffe2.TensorBoundShapes]]),
        requestOnlyEmbeddings = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        aotConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[caffe2.caffe2.AOTConfig]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetanetProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetanetProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = caffe2.metanet.BlobsMap
      case 2 => __out = caffe2.metanet.NetsMap
      case 3 => __out = caffe2.metanet.ModelInfo
      case 4 => __out = caffe2.metanet.PlansMap
      case 5 => __out = caffe2.metanet.StringMap
      case 8 => __out = caffe2.caffe2.TensorBoundShapes
      case 10 => __out = caffe2.caffe2.AOTConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.metanet.MetaNetDef(
    blobs = _root_.scala.Seq.empty,
    nets = _root_.scala.Seq.empty,
    modelInfo = _root_.scala.None,
    plans = _root_.scala.Seq.empty,
    applicationSpecificInfo = _root_.scala.Seq.empty,
    blobsOrder = _root_.scala.Seq.empty,
    preLoadBlobs = _root_.scala.Seq.empty,
    tensorBoundShapes = _root_.scala.None,
    requestOnlyEmbeddings = _root_.scala.Seq.empty,
    aotConfig = _root_.scala.None
  )
  final class Builder private (
    private val __blobs: _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.BlobsMap],
    private val __nets: _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.NetsMap],
    private var __modelInfo: _root_.scala.Option[caffe2.metanet.ModelInfo],
    private val __plans: _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.PlansMap],
    private val __applicationSpecificInfo: _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.StringMap],
    private val __blobsOrder: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
    private val __preLoadBlobs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
    private var __tensorBoundShapes: _root_.scala.Option[caffe2.caffe2.TensorBoundShapes],
    private val __requestOnlyEmbeddings: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
    private var __aotConfig: _root_.scala.Option[caffe2.caffe2.AOTConfig],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.metanet.MetaNetDef] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __blobs += _root_.scalapb.LiteParser.readMessage[caffe2.metanet.BlobsMap](_input__)
          case 18 =>
            __nets += _root_.scalapb.LiteParser.readMessage[caffe2.metanet.NetsMap](_input__)
          case 26 =>
            __modelInfo = Option(__modelInfo.fold(_root_.scalapb.LiteParser.readMessage[caffe2.metanet.ModelInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __plans += _root_.scalapb.LiteParser.readMessage[caffe2.metanet.PlansMap](_input__)
          case 42 =>
            __applicationSpecificInfo += _root_.scalapb.LiteParser.readMessage[caffe2.metanet.StringMap](_input__)
          case 50 =>
            __blobsOrder += _input__.readStringRequireUtf8()
          case 58 =>
            __preLoadBlobs += _input__.readStringRequireUtf8()
          case 66 =>
            __tensorBoundShapes = Option(__tensorBoundShapes.fold(_root_.scalapb.LiteParser.readMessage[caffe2.caffe2.TensorBoundShapes](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 74 =>
            __requestOnlyEmbeddings += _input__.readStringRequireUtf8()
          case 82 =>
            __aotConfig = Option(__aotConfig.fold(_root_.scalapb.LiteParser.readMessage[caffe2.caffe2.AOTConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.metanet.MetaNetDef = {
      caffe2.metanet.MetaNetDef(
        blobs = __blobs.result(),
        nets = __nets.result(),
        modelInfo = __modelInfo,
        plans = __plans.result(),
        applicationSpecificInfo = __applicationSpecificInfo.result(),
        blobsOrder = __blobsOrder.result(),
        preLoadBlobs = __preLoadBlobs.result(),
        tensorBoundShapes = __tensorBoundShapes,
        requestOnlyEmbeddings = __requestOnlyEmbeddings.result(),
        aotConfig = __aotConfig,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.metanet.MetaNetDef, caffe2.metanet.MetaNetDef.Builder] {
    def apply(): Builder = new Builder(
      __blobs = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.BlobsMap],
      __nets = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.NetsMap],
      __modelInfo = _root_.scala.None,
      __plans = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.PlansMap],
      __applicationSpecificInfo = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.StringMap],
      __blobsOrder = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
      __preLoadBlobs = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
      __tensorBoundShapes = _root_.scala.None,
      __requestOnlyEmbeddings = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
      __aotConfig = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.metanet.MetaNetDef): Builder = new Builder(
        __blobs = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.BlobsMap] ++= _message__.blobs,
        __nets = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.NetsMap] ++= _message__.nets,
        __modelInfo = _message__.modelInfo,
        __plans = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.PlansMap] ++= _message__.plans,
        __applicationSpecificInfo = new _root_.scala.collection.immutable.VectorBuilder[caffe2.metanet.StringMap] ++= _message__.applicationSpecificInfo,
        __blobsOrder = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] ++= _message__.blobsOrder,
        __preLoadBlobs = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] ++= _message__.preLoadBlobs,
        __tensorBoundShapes = _message__.tensorBoundShapes,
        __requestOnlyEmbeddings = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] ++= _message__.requestOnlyEmbeddings,
        __aotConfig = _message__.aotConfig,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.metanet.MetaNetDef.Builder()
  def newBuilder(`_message__`: caffe2.metanet.MetaNetDef): Builder = caffe2.metanet.MetaNetDef.Builder(_message__)
  implicit class MetaNetDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.metanet.MetaNetDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.metanet.MetaNetDef](_l) {
    def blobs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.metanet.BlobsMap]] = field(_.blobs)((c_, f_) => c_.copy(blobs = f_))
    def nets: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.metanet.NetsMap]] = field(_.nets)((c_, f_) => c_.copy(nets = f_))
    def modelInfo: _root_.scalapb.lenses.Lens[UpperPB, caffe2.metanet.ModelInfo] = field(_.getModelInfo)((c_, f_) => c_.copy(modelInfo = Option(f_)))
    def optionalModelInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.metanet.ModelInfo]] = field(_.modelInfo)((c_, f_) => c_.copy(modelInfo = f_))
    def plans: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.metanet.PlansMap]] = field(_.plans)((c_, f_) => c_.copy(plans = f_))
    def applicationSpecificInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.metanet.StringMap]] = field(_.applicationSpecificInfo)((c_, f_) => c_.copy(applicationSpecificInfo = f_))
    def blobsOrder: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.blobsOrder)((c_, f_) => c_.copy(blobsOrder = f_))
    def preLoadBlobs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.preLoadBlobs)((c_, f_) => c_.copy(preLoadBlobs = f_))
    def tensorBoundShapes: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorBoundShapes] = field(_.getTensorBoundShapes)((c_, f_) => c_.copy(tensorBoundShapes = Option(f_)))
    def optionalTensorBoundShapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.caffe2.TensorBoundShapes]] = field(_.tensorBoundShapes)((c_, f_) => c_.copy(tensorBoundShapes = f_))
    def requestOnlyEmbeddings: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.requestOnlyEmbeddings)((c_, f_) => c_.copy(requestOnlyEmbeddings = f_))
    def aotConfig: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.AOTConfig] = field(_.getAotConfig)((c_, f_) => c_.copy(aotConfig = Option(f_)))
    def optionalAotConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.caffe2.AOTConfig]] = field(_.aotConfig)((c_, f_) => c_.copy(aotConfig = f_))
  }
  final val BLOBS_FIELD_NUMBER = 1
  final val NETS_FIELD_NUMBER = 2
  final val MODELINFO_FIELD_NUMBER = 3
  final val PLANS_FIELD_NUMBER = 4
  final val APPLICATIONSPECIFICINFO_FIELD_NUMBER = 5
  final val BLOBSORDER_FIELD_NUMBER = 6
  final val PRELOADBLOBS_FIELD_NUMBER = 7
  final val TENSORBOUNDSHAPES_FIELD_NUMBER = 8
  final val REQUESTONLYEMBEDDINGS_FIELD_NUMBER = 9
  final val AOTCONFIG_FIELD_NUMBER = 10
  def of(
    blobs: _root_.scala.Seq[caffe2.metanet.BlobsMap],
    nets: _root_.scala.Seq[caffe2.metanet.NetsMap],
    modelInfo: _root_.scala.Option[caffe2.metanet.ModelInfo],
    plans: _root_.scala.Seq[caffe2.metanet.PlansMap],
    applicationSpecificInfo: _root_.scala.Seq[caffe2.metanet.StringMap],
    blobsOrder: _root_.scala.Seq[_root_.scala.Predef.String],
    preLoadBlobs: _root_.scala.Seq[_root_.scala.Predef.String],
    tensorBoundShapes: _root_.scala.Option[caffe2.caffe2.TensorBoundShapes],
    requestOnlyEmbeddings: _root_.scala.Seq[_root_.scala.Predef.String],
    aotConfig: _root_.scala.Option[caffe2.caffe2.AOTConfig]
  ): _root_.caffe2.metanet.MetaNetDef = _root_.caffe2.metanet.MetaNetDef(
    blobs,
    nets,
    modelInfo,
    plans,
    applicationSpecificInfo,
    blobsOrder,
    preLoadBlobs,
    tensorBoundShapes,
    requestOnlyEmbeddings,
    aotConfig
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.MetaNetDef])
}
