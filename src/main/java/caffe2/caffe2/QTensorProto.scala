// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

/** @param scales
  *   Multi-group quantization params
  * @param axis
  *   Multi-group quantization needed, indicates in which dimension
  *   we do the "group wise quantization"
  * @param isMultiparam
  *   It should be true if it is a multi-group quantization proto
  */
@SerialVersionUID(0L)
final case class QTensorProto(
    dims: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    precision: _root_.scala.Int,
    scale: _root_.scala.Double,
    bias: _root_.scala.Double,
    isSigned: _root_.scala.Boolean,
    data: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    name: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType] = _root_.scala.None,
    scales: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    biases: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    axis: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    isMultiparam: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QTensorProto] {
    private[this] def dataSerializedSize = {
      if (__dataSerializedSizeField == 0) __dataSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        data.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __dataSerializedSizeField
    }
    @transient private[this] var __dataSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      dims.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      }
      
      {
        val __value = precision
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      
      {
        val __value = scale
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
      };
      
      {
        val __value = bias
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, __value)
      };
      
      {
        val __value = isSigned
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
      };
      if (data.nonEmpty) {
        val __localsize = dataSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (name.isDefined) {
        val __value = name.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      };
      if (dataType.isDefined) {
        val __value = dataType.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, __value)
      };
      __size += 9 * scales.size
      __size += 9 * biases.size
      if (axis.isDefined) {
        val __value = axis.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, __value)
      };
      if (isMultiparam.isDefined) {
        val __value = isMultiparam.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      dims.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      
      {
        val __v = precision
        _output__.writeInt32(2, __v)
      };
      
      {
        val __v = scale
        _output__.writeDouble(3, __v)
      };
      
      {
        val __v = bias
        _output__.writeDouble(4, __v)
      };
      
      {
        val __v = isSigned
        _output__.writeBool(5, __v)
      };
      if (data.nonEmpty) {
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(dataSerializedSize)
        data.foreach(_output__.writeInt32NoTag)
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      dataType.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(8, __m)
      };
      scales.foreach { __v =>
        val __m = __v
        _output__.writeDouble(9, __m)
      };
      biases.foreach { __v =>
        val __m = __v
        _output__.writeDouble(10, __m)
      };
      axis.foreach { __v =>
        val __m = __v
        _output__.writeInt32(11, __m)
      };
      isMultiparam.foreach { __v =>
        val __m = __v
        _output__.writeBool(12, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearDims = copy(dims = _root_.scala.Seq.empty)
    def addDims(__vs: _root_.scala.Long*): QTensorProto = addAllDims(__vs)
    def addAllDims(__vs: Iterable[_root_.scala.Long]): QTensorProto = copy(dims = dims ++ __vs)
    def withDims(__v: _root_.scala.Seq[_root_.scala.Long]): QTensorProto = copy(dims = __v)
    def withPrecision(__v: _root_.scala.Int): QTensorProto = copy(precision = __v)
    def withScale(__v: _root_.scala.Double): QTensorProto = copy(scale = __v)
    def withBias(__v: _root_.scala.Double): QTensorProto = copy(bias = __v)
    def withIsSigned(__v: _root_.scala.Boolean): QTensorProto = copy(isSigned = __v)
    def clearData = copy(data = _root_.scala.Seq.empty)
    def addData(__vs: _root_.scala.Int*): QTensorProto = addAllData(__vs)
    def addAllData(__vs: Iterable[_root_.scala.Int]): QTensorProto = copy(data = data ++ __vs)
    def withData(__v: _root_.scala.Seq[_root_.scala.Int]): QTensorProto = copy(data = __v)
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: QTensorProto = copy(name = _root_.scala.None)
    def withName(__v: _root_.scala.Predef.String): QTensorProto = copy(name = Option(__v))
    def getDataType: caffe2.caffe2.TensorProto.DataType = dataType.getOrElse(caffe2.caffe2.TensorProto.DataType.INT32)
    def clearDataType: QTensorProto = copy(dataType = _root_.scala.None)
    def withDataType(__v: caffe2.caffe2.TensorProto.DataType): QTensorProto = copy(dataType = Option(__v))
    def clearScales = copy(scales = _root_.scala.Seq.empty)
    def addScales(__vs: _root_.scala.Double*): QTensorProto = addAllScales(__vs)
    def addAllScales(__vs: Iterable[_root_.scala.Double]): QTensorProto = copy(scales = scales ++ __vs)
    def withScales(__v: _root_.scala.Seq[_root_.scala.Double]): QTensorProto = copy(scales = __v)
    def clearBiases = copy(biases = _root_.scala.Seq.empty)
    def addBiases(__vs: _root_.scala.Double*): QTensorProto = addAllBiases(__vs)
    def addAllBiases(__vs: Iterable[_root_.scala.Double]): QTensorProto = copy(biases = biases ++ __vs)
    def withBiases(__v: _root_.scala.Seq[_root_.scala.Double]): QTensorProto = copy(biases = __v)
    def getAxis: _root_.scala.Int = axis.getOrElse(0)
    def clearAxis: QTensorProto = copy(axis = _root_.scala.None)
    def withAxis(__v: _root_.scala.Int): QTensorProto = copy(axis = Option(__v))
    def getIsMultiparam: _root_.scala.Boolean = isMultiparam.getOrElse(false)
    def clearIsMultiparam: QTensorProto = copy(isMultiparam = _root_.scala.None)
    def withIsMultiparam(__v: _root_.scala.Boolean): QTensorProto = copy(isMultiparam = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => dims
        case 2 => precision
        case 3 => scale
        case 4 => bias
        case 5 => isSigned
        case 6 => data
        case 7 => name.orNull
        case 8 => dataType.map(_.javaValueDescriptor).orNull
        case 9 => scales
        case 10 => biases
        case 11 => axis.orNull
        case 12 => isMultiparam.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(dims.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PInt(precision)
        case 3 => _root_.scalapb.descriptors.PDouble(scale)
        case 4 => _root_.scalapb.descriptors.PDouble(bias)
        case 5 => _root_.scalapb.descriptors.PBoolean(isSigned)
        case 6 => _root_.scalapb.descriptors.PRepeated(data.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 7 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => dataType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(scales.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(biases.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 11 => axis.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => isMultiparam.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.QTensorProto
    // @@protoc_insertion_point(GeneratedMessage[caffe2.QTensorProto])
}

object QTensorProto extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.QTensorProto] with scalapb.HasBuilder[caffe2.caffe2.QTensorProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.QTensorProto] with scalapb.HasBuilder[caffe2.caffe2.QTensorProto] = this
  def merge(`_message__`: caffe2.caffe2.QTensorProto, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.QTensorProto = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.QTensorProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.QTensorProto(
        dims = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        precision = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        scale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Double],
        bias = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Double],
        isSigned = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Boolean],
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        dataType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => caffe2.caffe2.TensorProto.DataType.fromValue(__e.number)),
        scales = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        biases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        axis = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        isMultiparam = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 8 => caffe2.caffe2.TensorProto.DataType
    }
  }
  lazy val defaultInstance = caffe2.caffe2.QTensorProto(
    dims = _root_.scala.Seq.empty,
    precision = 0,
    scale = 0.0,
    bias = 0.0,
    isSigned = false,
    data = _root_.scala.Seq.empty,
    name = _root_.scala.None,
    dataType = _root_.scala.None,
    scales = _root_.scala.Seq.empty,
    biases = _root_.scala.Seq.empty,
    axis = _root_.scala.None,
    isMultiparam = _root_.scala.None
  )
  final class Builder private (
    private val __dims: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
    private var __precision: _root_.scala.Int,
    private var __scale: _root_.scala.Double,
    private var __bias: _root_.scala.Double,
    private var __isSigned: _root_.scala.Boolean,
    private val __data: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
    private var __name: _root_.scala.Option[_root_.scala.Predef.String],
    private var __dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType],
    private val __scales: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double],
    private val __biases: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double],
    private var __axis: _root_.scala.Option[_root_.scala.Int],
    private var __isMultiparam: _root_.scala.Option[_root_.scala.Boolean],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.QTensorProto] {
    private var __requiredFields0: _root_.scala.Long = 0xfL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __dims += _input__.readInt64()
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __dims += _input__.readInt64()
            }
            _input__.popLimit(oldLimit)
          }
          case 16 =>
            __precision = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 25 =>
            __scale = _input__.readDouble()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 33 =>
            __bias = _input__.readDouble()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 40 =>
            __isSigned = _input__.readBool()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 48 =>
            __data += _input__.readInt32()
          case 50 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __data += _input__.readInt32()
            }
            _input__.popLimit(oldLimit)
          }
          case 58 =>
            __name = Option(_input__.readStringRequireUtf8())
          case 64 =>
            __dataType = Option(caffe2.caffe2.TensorProto.DataType.fromValue(_input__.readEnum()))
          case 73 =>
            __scales += _input__.readDouble()
          case 74 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __scales += _input__.readDouble()
            }
            _input__.popLimit(oldLimit)
          }
          case 81 =>
            __biases += _input__.readDouble()
          case 82 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __biases += _input__.readDouble()
            }
            _input__.popLimit(oldLimit)
          }
          case 88 =>
            __axis = Option(_input__.readInt32())
          case 96 =>
            __isMultiparam = Option(_input__.readBool())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.QTensorProto = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      caffe2.caffe2.QTensorProto(
        dims = __dims.result(),
        precision = __precision,
        scale = __scale,
        bias = __bias,
        isSigned = __isSigned,
        data = __data.result(),
        name = __name,
        dataType = __dataType,
        scales = __scales.result(),
        biases = __biases.result(),
        axis = __axis,
        isMultiparam = __isMultiparam,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.QTensorProto, caffe2.caffe2.QTensorProto.Builder] {
    def apply(): Builder = new Builder(
      __dims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
      __precision = 0,
      __scale = 0.0,
      __bias = 0.0,
      __isSigned = false,
      __data = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
      __name = _root_.scala.None,
      __dataType = _root_.scala.None,
      __scales = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double],
      __biases = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double],
      __axis = _root_.scala.None,
      __isMultiparam = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.QTensorProto): Builder = new Builder(
        __dims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] ++= _message__.dims,
        __precision = _message__.precision,
        __scale = _message__.scale,
        __bias = _message__.bias,
        __isSigned = _message__.isSigned,
        __data = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] ++= _message__.data,
        __name = _message__.name,
        __dataType = _message__.dataType,
        __scales = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] ++= _message__.scales,
        __biases = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] ++= _message__.biases,
        __axis = _message__.axis,
        __isMultiparam = _message__.isMultiparam,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.QTensorProto.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.QTensorProto): Builder = caffe2.caffe2.QTensorProto.Builder(_message__)
  implicit class QTensorProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.QTensorProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.QTensorProto](_l) {
    def dims: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.dims)((c_, f_) => c_.copy(dims = f_))
    def precision: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.precision)((c_, f_) => c_.copy(precision = f_))
    def scale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.scale)((c_, f_) => c_.copy(scale = f_))
    def bias: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.bias)((c_, f_) => c_.copy(bias = f_))
    def isSigned: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isSigned)((c_, f_) => c_.copy(isSigned = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def dataType: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorProto.DataType] = field(_.getDataType)((c_, f_) => c_.copy(dataType = Option(f_)))
    def optionalDataType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.caffe2.TensorProto.DataType]] = field(_.dataType)((c_, f_) => c_.copy(dataType = f_))
    def scales: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.scales)((c_, f_) => c_.copy(scales = f_))
    def biases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.biases)((c_, f_) => c_.copy(biases = f_))
    def axis: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAxis)((c_, f_) => c_.copy(axis = Option(f_)))
    def optionalAxis: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.axis)((c_, f_) => c_.copy(axis = f_))
    def isMultiparam: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsMultiparam)((c_, f_) => c_.copy(isMultiparam = Option(f_)))
    def optionalIsMultiparam: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.isMultiparam)((c_, f_) => c_.copy(isMultiparam = f_))
  }
  final val DIMS_FIELD_NUMBER = 1
  final val PRECISION_FIELD_NUMBER = 2
  final val SCALE_FIELD_NUMBER = 3
  final val BIAS_FIELD_NUMBER = 4
  final val IS_SIGNED_FIELD_NUMBER = 5
  final val DATA_FIELD_NUMBER = 6
  final val NAME_FIELD_NUMBER = 7
  final val DATA_TYPE_FIELD_NUMBER = 8
  final val SCALES_FIELD_NUMBER = 9
  final val BIASES_FIELD_NUMBER = 10
  final val AXIS_FIELD_NUMBER = 11
  final val IS_MULTIPARAM_FIELD_NUMBER = 12
  def of(
    dims: _root_.scala.Seq[_root_.scala.Long],
    precision: _root_.scala.Int,
    scale: _root_.scala.Double,
    bias: _root_.scala.Double,
    isSigned: _root_.scala.Boolean,
    data: _root_.scala.Seq[_root_.scala.Int],
    name: _root_.scala.Option[_root_.scala.Predef.String],
    dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType],
    scales: _root_.scala.Seq[_root_.scala.Double],
    biases: _root_.scala.Seq[_root_.scala.Double],
    axis: _root_.scala.Option[_root_.scala.Int],
    isMultiparam: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.caffe2.caffe2.QTensorProto = _root_.caffe2.caffe2.QTensorProto(
    dims,
    precision,
    scale,
    bias,
    isSigned,
    data,
    name,
    dataType,
    scales,
    biases,
    axis,
    isMultiparam
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.QTensorProto])
}
