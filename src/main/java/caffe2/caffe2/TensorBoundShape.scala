// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

/** TensorBoundShape is used to save bound shape inference result for a tensor.
  * TensorBoundShape.shape is inferred shape for this tensor.
  * TensorBoundShape.dimType contains dim_type for every dimension.
  * eg: for dimension i, shape.dims[i] is the inferred shape and
  * dim_type[i] is corresponding dim_type.
  *
  * @param dimType
  *   dim_type.size() == shape.dims.size()
  * @param shapeIsFinal
  *   a flag to indicate whether the shape is final and cannot be changed
  *   eg: input/output of in-place ops
  */
@SerialVersionUID(0L)
final case class TensorBoundShape(
    shape: _root_.scala.Option[caffe2.caffe2.TensorShape] = _root_.scala.None,
    dimType: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape.DimType] = _root_.scala.Seq.empty,
    name: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    shapeIsFinal: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorBoundShape] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (shape.isDefined) {
        val __value = shape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      dimType.foreach { __item =>
        val __value = __item.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
      }
      if (name.isDefined) {
        val __value = name.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (shapeIsFinal.isDefined) {
        val __value = shapeIsFinal.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      shape.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      dimType.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(2, __m)
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      shapeIsFinal.foreach { __v =>
        val __m = __v
        _output__.writeBool(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getShape: caffe2.caffe2.TensorShape = shape.getOrElse(caffe2.caffe2.TensorShape.defaultInstance)
    def clearShape: TensorBoundShape = copy(shape = _root_.scala.None)
    def withShape(__v: caffe2.caffe2.TensorShape): TensorBoundShape = copy(shape = Option(__v))
    def clearDimType = copy(dimType = _root_.scala.Seq.empty)
    def addDimType(__vs: caffe2.caffe2.TensorBoundShape.DimType*): TensorBoundShape = addAllDimType(__vs)
    def addAllDimType(__vs: Iterable[caffe2.caffe2.TensorBoundShape.DimType]): TensorBoundShape = copy(dimType = dimType ++ __vs)
    def withDimType(__v: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape.DimType]): TensorBoundShape = copy(dimType = __v)
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: TensorBoundShape = copy(name = _root_.scala.None)
    def withName(__v: _root_.scala.Predef.String): TensorBoundShape = copy(name = Option(__v))
    def getShapeIsFinal: _root_.scala.Boolean = shapeIsFinal.getOrElse(false)
    def clearShapeIsFinal: TensorBoundShape = copy(shapeIsFinal = _root_.scala.None)
    def withShapeIsFinal(__v: _root_.scala.Boolean): TensorBoundShape = copy(shapeIsFinal = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => shape.orNull
        case 2 => dimType.iterator.map(_.javaValueDescriptor).toSeq
        case 3 => name.orNull
        case 4 => shapeIsFinal.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(dimType.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
        case 3 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => shapeIsFinal.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.TensorBoundShape
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TensorBoundShape])
}

object TensorBoundShape extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorBoundShape] with scalapb.HasBuilder[caffe2.caffe2.TensorBoundShape] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorBoundShape] with scalapb.HasBuilder[caffe2.caffe2.TensorBoundShape] = this
  def merge(`_message__`: caffe2.caffe2.TensorBoundShape, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.TensorBoundShape = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.TensorBoundShape] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.TensorBoundShape(
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[caffe2.caffe2.TensorShape]]),
        dimType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => caffe2.caffe2.TensorBoundShape.DimType.fromValue(__e.number)).toSeq,
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        shapeIsFinal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = caffe2.caffe2.TensorShape
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => caffe2.caffe2.TensorBoundShape.DimType
    }
  }
  lazy val defaultInstance = caffe2.caffe2.TensorBoundShape(
    shape = _root_.scala.None,
    dimType = _root_.scala.Seq.empty,
    name = _root_.scala.None,
    shapeIsFinal = _root_.scala.None
  )
  final class Builder private (
    private var __shape: _root_.scala.Option[caffe2.caffe2.TensorShape],
    private val __dimType: _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape.DimType],
    private var __name: _root_.scala.Option[_root_.scala.Predef.String],
    private var __shapeIsFinal: _root_.scala.Option[_root_.scala.Boolean],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.TensorBoundShape] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __shape = Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[caffe2.caffe2.TensorShape](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 16 =>
            __dimType += caffe2.caffe2.TensorBoundShape.DimType.fromValue(_input__.readEnum())
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __dimType += caffe2.caffe2.TensorBoundShape.DimType.fromValue(_input__.readEnum())
            }
            _input__.popLimit(oldLimit)
          }
          case 26 =>
            __name = Option(_input__.readStringRequireUtf8())
          case 32 =>
            __shapeIsFinal = Option(_input__.readBool())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.TensorBoundShape = {
      caffe2.caffe2.TensorBoundShape(
        shape = __shape,
        dimType = __dimType.result(),
        name = __name,
        shapeIsFinal = __shapeIsFinal,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.TensorBoundShape, caffe2.caffe2.TensorBoundShape.Builder] {
    def apply(): Builder = new Builder(
      __shape = _root_.scala.None,
      __dimType = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape.DimType],
      __name = _root_.scala.None,
      __shapeIsFinal = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.TensorBoundShape): Builder = new Builder(
        __shape = _message__.shape,
        __dimType = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape.DimType] ++= _message__.dimType,
        __name = _message__.name,
        __shapeIsFinal = _message__.shapeIsFinal,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.TensorBoundShape.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.TensorBoundShape): Builder = caffe2.caffe2.TensorBoundShape.Builder(_message__)
  sealed abstract class DimType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = DimType
    def isUnknown: _root_.scala.Boolean = false
    def isConstant: _root_.scala.Boolean = false
    def isBatch: _root_.scala.Boolean = false
    def isBatchOfFeatureMax: _root_.scala.Boolean = false
    def isBatchOfFeatureMaxDefault: _root_.scala.Boolean = false
    def isFeatureMax: _root_.scala.Boolean = false
    def isFeatureMaxDefault: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[DimType] = caffe2.caffe2.TensorBoundShape.DimType
    final def asRecognized: _root_.scala.Option[caffe2.caffe2.TensorBoundShape.DimType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[caffe2.caffe2.TensorBoundShape.DimType.Recognized])
  }
  
  object DimType extends _root_.scalapb.GeneratedEnumCompanion[DimType] {
    sealed trait Recognized extends DimType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DimType] = this
    /** unknown
      */
    @SerialVersionUID(0L)
    case object UNKNOWN extends DimType(0) with DimType.Recognized {
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: _root_.scala.Boolean = true
    }
    
    /** constant
      */
    @SerialVersionUID(0L)
    case object CONSTANT extends DimType(1) with DimType.Recognized {
      val index = 1
      val name = "CONSTANT"
      override def isConstant: _root_.scala.Boolean = true
    }
    
    /** batch, corresponding dimension is batch_size
      */
    @SerialVersionUID(0L)
    case object BATCH extends DimType(2) with DimType.Recognized {
      val index = 2
      val name = "BATCH"
      override def isBatch: _root_.scala.Boolean = true
    }
    
    /** batch_of_feature_max,
      * corresponding shape is inferred_feature_length * batch_size
      */
    @SerialVersionUID(0L)
    case object BATCH_OF_FEATURE_MAX extends DimType(3) with DimType.Recognized {
      val index = 3
      val name = "BATCH_OF_FEATURE_MAX"
      override def isBatchOfFeatureMax: _root_.scala.Boolean = true
    }
    
    /** batch_of_feature_max_default
      * corresponding shape is default_feature_length * batch_size
      */
    @SerialVersionUID(0L)
    case object BATCH_OF_FEATURE_MAX_DEFAULT extends DimType(4) with DimType.Recognized {
      val index = 4
      val name = "BATCH_OF_FEATURE_MAX_DEFAULT"
      override def isBatchOfFeatureMaxDefault: _root_.scala.Boolean = true
    }
    
    /** feature_max, corresponding shape is inferred_feature_length
      */
    @SerialVersionUID(0L)
    case object FEATURE_MAX extends DimType(5) with DimType.Recognized {
      val index = 5
      val name = "FEATURE_MAX"
      override def isFeatureMax: _root_.scala.Boolean = true
    }
    
    /** feature_max_default, corresponding shape is default_feature_length
      */
    @SerialVersionUID(0L)
    case object FEATURE_MAX_DEFAULT extends DimType(6) with DimType.Recognized {
      val index = 6
      val name = "FEATURE_MAX_DEFAULT"
      override def isFeatureMaxDefault: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DimType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(UNKNOWN, CONSTANT, BATCH, BATCH_OF_FEATURE_MAX, BATCH_OF_FEATURE_MAX_DEFAULT, FEATURE_MAX, FEATURE_MAX_DEFAULT)
    def fromValue(__value: _root_.scala.Int): DimType = __value match {
      case 0 => UNKNOWN
      case 1 => CONSTANT
      case 2 => BATCH
      case 3 => BATCH_OF_FEATURE_MAX
      case 4 => BATCH_OF_FEATURE_MAX_DEFAULT
      case 5 => FEATURE_MAX
      case 6 => FEATURE_MAX_DEFAULT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = caffe2.caffe2.TensorBoundShape.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = caffe2.caffe2.TensorBoundShape.scalaDescriptor.enums(0)
  }
  implicit class TensorBoundShapeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorBoundShape]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.TensorBoundShape](_l) {
    def shape: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorShape] = field(_.getShape)((c_, f_) => c_.copy(shape = Option(f_)))
    def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.caffe2.TensorShape]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def dimType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.caffe2.TensorBoundShape.DimType]] = field(_.dimType)((c_, f_) => c_.copy(dimType = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def shapeIsFinal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getShapeIsFinal)((c_, f_) => c_.copy(shapeIsFinal = Option(f_)))
    def optionalShapeIsFinal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.shapeIsFinal)((c_, f_) => c_.copy(shapeIsFinal = f_))
  }
  final val SHAPE_FIELD_NUMBER = 1
  final val DIM_TYPE_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val SHAPE_IS_FINAL_FIELD_NUMBER = 4
  def of(
    shape: _root_.scala.Option[caffe2.caffe2.TensorShape],
    dimType: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape.DimType],
    name: _root_.scala.Option[_root_.scala.Predef.String],
    shapeIsFinal: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.caffe2.caffe2.TensorBoundShape = _root_.caffe2.caffe2.TensorBoundShape(
    shape,
    dimType,
    name,
    shapeIsFinal
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TensorBoundShape])
}
