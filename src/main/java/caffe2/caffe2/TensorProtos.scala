// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

/** TensorProtos stores multiple TensorProto objects in one single proto. This
  * is useful for small tensors; For anything big, consider using a DB for
  * storage.
  */
@SerialVersionUID(0L)
final case class TensorProtos(
    protos: _root_.scala.Seq[caffe2.caffe2.TensorProto] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorProtos] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      protos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      protos.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearProtos = copy(protos = _root_.scala.Seq.empty)
    def addProtos(__vs: caffe2.caffe2.TensorProto*): TensorProtos = addAllProtos(__vs)
    def addAllProtos(__vs: Iterable[caffe2.caffe2.TensorProto]): TensorProtos = copy(protos = protos ++ __vs)
    def withProtos(__v: _root_.scala.Seq[caffe2.caffe2.TensorProto]): TensorProtos = copy(protos = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => protos
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(protos.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.TensorProtos
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TensorProtos])
}

object TensorProtos extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorProtos] with scalapb.HasBuilder[caffe2.caffe2.TensorProtos] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorProtos] with scalapb.HasBuilder[caffe2.caffe2.TensorProtos] = this
  def merge(`_message__`: caffe2.caffe2.TensorProtos, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.TensorProtos = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.TensorProtos] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.TensorProtos(
        protos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[caffe2.caffe2.TensorProto]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = caffe2.caffe2.TensorProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.caffe2.TensorProtos(
    protos = _root_.scala.Seq.empty
  )
  final class Builder private (
    private val __protos: _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorProto],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.TensorProtos] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __protos += _root_.scalapb.LiteParser.readMessage[caffe2.caffe2.TensorProto](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.TensorProtos = {
      caffe2.caffe2.TensorProtos(
        protos = __protos.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.TensorProtos, caffe2.caffe2.TensorProtos.Builder] {
    def apply(): Builder = new Builder(
      __protos = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorProto],
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.TensorProtos): Builder = new Builder(
        __protos = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorProto] ++= _message__.protos,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.TensorProtos.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.TensorProtos): Builder = caffe2.caffe2.TensorProtos.Builder(_message__)
  implicit class TensorProtosLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorProtos]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.TensorProtos](_l) {
    def protos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.caffe2.TensorProto]] = field(_.protos)((c_, f_) => c_.copy(protos = f_))
  }
  final val PROTOS_FIELD_NUMBER = 1
  def of(
    protos: _root_.scala.Seq[caffe2.caffe2.TensorProto]
  ): _root_.caffe2.caffe2.TensorProtos = _root_.caffe2.caffe2.TensorProtos(
    protos
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TensorProtos])
}
