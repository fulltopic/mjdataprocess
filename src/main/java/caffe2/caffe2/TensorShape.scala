// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

@SerialVersionUID(0L)
final case class TensorShape(
    dims: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType] = _root_.scala.None,
    unknownDims: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownShape: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    name: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorShape] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      dims.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      }
      if (dataType.isDefined) {
        val __value = dataType.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
      };
      unknownDims.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      }
      if (unknownShape.isDefined) {
        val __value = unknownShape.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      if (name.isDefined) {
        val __value = name.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      dims.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      dataType.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(2, __m)
      };
      unknownDims.foreach { __v =>
        val __m = __v
        _output__.writeInt32(3, __m)
      };
      unknownShape.foreach { __v =>
        val __m = __v
        _output__.writeBool(4, __m)
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearDims = copy(dims = _root_.scala.Seq.empty)
    def addDims(__vs: _root_.scala.Long*): TensorShape = addAllDims(__vs)
    def addAllDims(__vs: Iterable[_root_.scala.Long]): TensorShape = copy(dims = dims ++ __vs)
    def withDims(__v: _root_.scala.Seq[_root_.scala.Long]): TensorShape = copy(dims = __v)
    def getDataType: caffe2.caffe2.TensorProto.DataType = dataType.getOrElse(caffe2.caffe2.TensorProto.DataType.FLOAT)
    def clearDataType: TensorShape = copy(dataType = _root_.scala.None)
    def withDataType(__v: caffe2.caffe2.TensorProto.DataType): TensorShape = copy(dataType = Option(__v))
    def clearUnknownDims = copy(unknownDims = _root_.scala.Seq.empty)
    def addUnknownDims(__vs: _root_.scala.Int*): TensorShape = addAllUnknownDims(__vs)
    def addAllUnknownDims(__vs: Iterable[_root_.scala.Int]): TensorShape = copy(unknownDims = unknownDims ++ __vs)
    def withUnknownDims(__v: _root_.scala.Seq[_root_.scala.Int]): TensorShape = copy(unknownDims = __v)
    def getUnknownShape: _root_.scala.Boolean = unknownShape.getOrElse(false)
    def clearUnknownShape: TensorShape = copy(unknownShape = _root_.scala.None)
    def withUnknownShape(__v: _root_.scala.Boolean): TensorShape = copy(unknownShape = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: TensorShape = copy(name = _root_.scala.None)
    def withName(__v: _root_.scala.Predef.String): TensorShape = copy(name = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => dims
        case 2 => dataType.map(_.javaValueDescriptor).orNull
        case 3 => unknownDims
        case 4 => unknownShape.orNull
        case 5 => name.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(dims.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 2 => dataType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(unknownDims.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 4 => unknownShape.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.TensorShape
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TensorShape])
}

object TensorShape extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorShape] with scalapb.HasBuilder[caffe2.caffe2.TensorShape] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorShape] with scalapb.HasBuilder[caffe2.caffe2.TensorShape] = this
  def merge(`_message__`: caffe2.caffe2.TensorShape, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.TensorShape = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.TensorShape] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.TensorShape(
        dims = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        dataType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => caffe2.caffe2.TensorProto.DataType.fromValue(__e.number)),
        unknownDims = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        unknownShape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => caffe2.caffe2.TensorProto.DataType
    }
  }
  lazy val defaultInstance = caffe2.caffe2.TensorShape(
    dims = _root_.scala.Seq.empty,
    dataType = _root_.scala.None,
    unknownDims = _root_.scala.Seq.empty,
    unknownShape = _root_.scala.None,
    name = _root_.scala.None
  )
  final class Builder private (
    private val __dims: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
    private var __dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType],
    private val __unknownDims: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
    private var __unknownShape: _root_.scala.Option[_root_.scala.Boolean],
    private var __name: _root_.scala.Option[_root_.scala.Predef.String],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.TensorShape] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __dims += _input__.readInt64()
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __dims += _input__.readInt64()
            }
            _input__.popLimit(oldLimit)
          }
          case 16 =>
            __dataType = Option(caffe2.caffe2.TensorProto.DataType.fromValue(_input__.readEnum()))
          case 24 =>
            __unknownDims += _input__.readInt32()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __unknownDims += _input__.readInt32()
            }
            _input__.popLimit(oldLimit)
          }
          case 32 =>
            __unknownShape = Option(_input__.readBool())
          case 42 =>
            __name = Option(_input__.readStringRequireUtf8())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.TensorShape = {
      caffe2.caffe2.TensorShape(
        dims = __dims.result(),
        dataType = __dataType,
        unknownDims = __unknownDims.result(),
        unknownShape = __unknownShape,
        name = __name,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.TensorShape, caffe2.caffe2.TensorShape.Builder] {
    def apply(): Builder = new Builder(
      __dims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
      __dataType = _root_.scala.None,
      __unknownDims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
      __unknownShape = _root_.scala.None,
      __name = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.TensorShape): Builder = new Builder(
        __dims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] ++= _message__.dims,
        __dataType = _message__.dataType,
        __unknownDims = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] ++= _message__.unknownDims,
        __unknownShape = _message__.unknownShape,
        __name = _message__.name,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.TensorShape.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.TensorShape): Builder = caffe2.caffe2.TensorShape.Builder(_message__)
  implicit class TensorShapeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorShape]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.TensorShape](_l) {
    def dims: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.dims)((c_, f_) => c_.copy(dims = f_))
    def dataType: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorProto.DataType] = field(_.getDataType)((c_, f_) => c_.copy(dataType = Option(f_)))
    def optionalDataType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.caffe2.TensorProto.DataType]] = field(_.dataType)((c_, f_) => c_.copy(dataType = f_))
    def unknownDims: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.unknownDims)((c_, f_) => c_.copy(unknownDims = f_))
    def unknownShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getUnknownShape)((c_, f_) => c_.copy(unknownShape = Option(f_)))
    def optionalUnknownShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.unknownShape)((c_, f_) => c_.copy(unknownShape = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
  }
  final val DIMS_FIELD_NUMBER = 1
  final val DATA_TYPE_FIELD_NUMBER = 2
  final val UNKNOWN_DIMS_FIELD_NUMBER = 3
  final val UNKNOWN_SHAPE_FIELD_NUMBER = 4
  final val NAME_FIELD_NUMBER = 5
  def of(
    dims: _root_.scala.Seq[_root_.scala.Long],
    dataType: _root_.scala.Option[caffe2.caffe2.TensorProto.DataType],
    unknownDims: _root_.scala.Seq[_root_.scala.Int],
    unknownShape: _root_.scala.Option[_root_.scala.Boolean],
    name: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.caffe2.caffe2.TensorShape = _root_.caffe2.caffe2.TensorShape(
    dims,
    dataType,
    unknownDims,
    unknownShape,
    name
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TensorShape])
}
