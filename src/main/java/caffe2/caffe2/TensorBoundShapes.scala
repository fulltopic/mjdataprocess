// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

@SerialVersionUID(0L)
final case class TensorBoundShapes(
    shapes: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape] = _root_.scala.Seq.empty,
    maxBatchSize: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    maxFeatureLen: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorBoundShapes] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      shapes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (maxBatchSize.isDefined) {
        val __value = maxBatchSize.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (maxFeatureLen.isDefined) {
        val __value = maxFeatureLen.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      shapes.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      maxBatchSize.foreach { __v =>
        val __m = __v
        _output__.writeInt64(2, __m)
      };
      maxFeatureLen.foreach { __v =>
        val __m = __v
        _output__.writeInt64(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearShapes = copy(shapes = _root_.scala.Seq.empty)
    def addShapes(__vs: caffe2.caffe2.TensorBoundShape*): TensorBoundShapes = addAllShapes(__vs)
    def addAllShapes(__vs: Iterable[caffe2.caffe2.TensorBoundShape]): TensorBoundShapes = copy(shapes = shapes ++ __vs)
    def withShapes(__v: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape]): TensorBoundShapes = copy(shapes = __v)
    def getMaxBatchSize: _root_.scala.Long = maxBatchSize.getOrElse(0L)
    def clearMaxBatchSize: TensorBoundShapes = copy(maxBatchSize = _root_.scala.None)
    def withMaxBatchSize(__v: _root_.scala.Long): TensorBoundShapes = copy(maxBatchSize = Option(__v))
    def getMaxFeatureLen: _root_.scala.Long = maxFeatureLen.getOrElse(0L)
    def clearMaxFeatureLen: TensorBoundShapes = copy(maxFeatureLen = _root_.scala.None)
    def withMaxFeatureLen(__v: _root_.scala.Long): TensorBoundShapes = copy(maxFeatureLen = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => shapes
        case 2 => maxBatchSize.orNull
        case 3 => maxFeatureLen.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(shapes.iterator.map(_.toPMessage).toVector)
        case 2 => maxBatchSize.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => maxFeatureLen.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.TensorBoundShapes
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TensorBoundShapes])
}

object TensorBoundShapes extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorBoundShapes] with scalapb.HasBuilder[caffe2.caffe2.TensorBoundShapes] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.TensorBoundShapes] with scalapb.HasBuilder[caffe2.caffe2.TensorBoundShapes] = this
  def merge(`_message__`: caffe2.caffe2.TensorBoundShapes, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.TensorBoundShapes = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.TensorBoundShapes] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.TensorBoundShapes(
        shapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[caffe2.caffe2.TensorBoundShape]]).getOrElse(_root_.scala.Seq.empty),
        maxBatchSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        maxFeatureLen = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = caffe2.caffe2.TensorBoundShape
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.caffe2.TensorBoundShapes(
    shapes = _root_.scala.Seq.empty,
    maxBatchSize = _root_.scala.None,
    maxFeatureLen = _root_.scala.None
  )
  final class Builder private (
    private val __shapes: _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape],
    private var __maxBatchSize: _root_.scala.Option[_root_.scala.Long],
    private var __maxFeatureLen: _root_.scala.Option[_root_.scala.Long],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.TensorBoundShapes] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __shapes += _root_.scalapb.LiteParser.readMessage[caffe2.caffe2.TensorBoundShape](_input__)
          case 16 =>
            __maxBatchSize = Option(_input__.readInt64())
          case 24 =>
            __maxFeatureLen = Option(_input__.readInt64())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.TensorBoundShapes = {
      caffe2.caffe2.TensorBoundShapes(
        shapes = __shapes.result(),
        maxBatchSize = __maxBatchSize,
        maxFeatureLen = __maxFeatureLen,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.TensorBoundShapes, caffe2.caffe2.TensorBoundShapes.Builder] {
    def apply(): Builder = new Builder(
      __shapes = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape],
      __maxBatchSize = _root_.scala.None,
      __maxFeatureLen = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.TensorBoundShapes): Builder = new Builder(
        __shapes = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.TensorBoundShape] ++= _message__.shapes,
        __maxBatchSize = _message__.maxBatchSize,
        __maxFeatureLen = _message__.maxFeatureLen,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.TensorBoundShapes.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.TensorBoundShapes): Builder = caffe2.caffe2.TensorBoundShapes.Builder(_message__)
  implicit class TensorBoundShapesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.TensorBoundShapes]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.TensorBoundShapes](_l) {
    def shapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.caffe2.TensorBoundShape]] = field(_.shapes)((c_, f_) => c_.copy(shapes = f_))
    def maxBatchSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMaxBatchSize)((c_, f_) => c_.copy(maxBatchSize = Option(f_)))
    def optionalMaxBatchSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.maxBatchSize)((c_, f_) => c_.copy(maxBatchSize = f_))
    def maxFeatureLen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMaxFeatureLen)((c_, f_) => c_.copy(maxFeatureLen = Option(f_)))
    def optionalMaxFeatureLen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.maxFeatureLen)((c_, f_) => c_.copy(maxFeatureLen = f_))
  }
  final val SHAPES_FIELD_NUMBER = 1
  final val MAX_BATCH_SIZE_FIELD_NUMBER = 2
  final val MAX_FEATURE_LEN_FIELD_NUMBER = 3
  def of(
    shapes: _root_.scala.Seq[caffe2.caffe2.TensorBoundShape],
    maxBatchSize: _root_.scala.Option[_root_.scala.Long],
    maxFeatureLen: _root_.scala.Option[_root_.scala.Long]
  ): _root_.caffe2.caffe2.TensorBoundShapes = _root_.caffe2.caffe2.TensorBoundShapes(
    shapes,
    maxBatchSize,
    maxFeatureLen
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TensorBoundShapes])
}
