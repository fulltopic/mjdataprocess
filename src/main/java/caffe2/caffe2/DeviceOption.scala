// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

/** Device-specific options. We do not distinguish DeviceOption protos for
  * different DeviceTypes, so currently all devices share the same DeviceOption
  * proto. Fields that are specific to a device type is ignored if the type does
  * not match.
  * Note: if you add fields to the DeviceOption, make sure you add the
  * corresponding changes to IsSameDevice() function in utils/proto_utils.{h,cc}.
  *
  * @param deviceType
  *   [general] Options that need to be carried out before running the execution.
  *   optional DeviceType device_type = 1 [ default = CPU ];
  *   0 is CPU.
  * @param deviceId
  *   [general] Used together with device_type to identify the exact device
  * @param randomSeed
  *   [general] The random seed to start the device random number generator with.
  * @param nodeName
  *   [general] What node this op should execute on.
  *   Used for net transformation purposes. Must be empty at execution time.
  * @param numaNodeId
  *   [CPU and Linux specific] NUMA node id
  * @param extraInfo
  *   [general] Extra information passed, not used at execution time currently.
  */
@SerialVersionUID(0L)
final case class DeviceOption(
    deviceType: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    deviceId: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    randomSeed: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    nodeName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    numaNodeId: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    extraInfo: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DeviceOption] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (deviceType.isDefined) {
        val __value = deviceType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      if (deviceId.isDefined) {
        val __value = deviceId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (randomSeed.isDefined) {
        val __value = randomSeed.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, __value)
      };
      if (nodeName.isDefined) {
        val __value = nodeName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      if (numaNodeId.isDefined) {
        val __value = numaNodeId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
      };
      extraInfo.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      deviceType.foreach { __v =>
        val __m = __v
        _output__.writeInt32(1, __m)
      };
      deviceId.foreach { __v =>
        val __m = __v
        _output__.writeInt32(2, __m)
      };
      randomSeed.foreach { __v =>
        val __m = __v
        _output__.writeUInt32(3, __m)
      };
      nodeName.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      numaNodeId.foreach { __v =>
        val __m = __v
        _output__.writeInt32(5, __m)
      };
      extraInfo.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getDeviceType: _root_.scala.Int = deviceType.getOrElse(0)
    def clearDeviceType: DeviceOption = copy(deviceType = _root_.scala.None)
    def withDeviceType(__v: _root_.scala.Int): DeviceOption = copy(deviceType = Option(__v))
    def getDeviceId: _root_.scala.Int = deviceId.getOrElse(0)
    def clearDeviceId: DeviceOption = copy(deviceId = _root_.scala.None)
    def withDeviceId(__v: _root_.scala.Int): DeviceOption = copy(deviceId = Option(__v))
    def getRandomSeed: _root_.scala.Int = randomSeed.getOrElse(0)
    def clearRandomSeed: DeviceOption = copy(randomSeed = _root_.scala.None)
    def withRandomSeed(__v: _root_.scala.Int): DeviceOption = copy(randomSeed = Option(__v))
    def getNodeName: _root_.scala.Predef.String = nodeName.getOrElse("")
    def clearNodeName: DeviceOption = copy(nodeName = _root_.scala.None)
    def withNodeName(__v: _root_.scala.Predef.String): DeviceOption = copy(nodeName = Option(__v))
    def getNumaNodeId: _root_.scala.Int = numaNodeId.getOrElse(0)
    def clearNumaNodeId: DeviceOption = copy(numaNodeId = _root_.scala.None)
    def withNumaNodeId(__v: _root_.scala.Int): DeviceOption = copy(numaNodeId = Option(__v))
    def clearExtraInfo = copy(extraInfo = _root_.scala.Seq.empty)
    def addExtraInfo(__vs: _root_.scala.Predef.String*): DeviceOption = addAllExtraInfo(__vs)
    def addAllExtraInfo(__vs: Iterable[_root_.scala.Predef.String]): DeviceOption = copy(extraInfo = extraInfo ++ __vs)
    def withExtraInfo(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DeviceOption = copy(extraInfo = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.orNull
        case 2 => deviceId.orNull
        case 3 => randomSeed.orNull
        case 4 => nodeName.orNull
        case 5 => numaNodeId.orNull
        case 6 => extraInfo
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => deviceType.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => deviceId.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => randomSeed.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => nodeName.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => numaNodeId.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(extraInfo.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.DeviceOption
    // @@protoc_insertion_point(GeneratedMessage[caffe2.DeviceOption])
}

object DeviceOption extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.DeviceOption] with scalapb.HasBuilder[caffe2.caffe2.DeviceOption] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.DeviceOption] with scalapb.HasBuilder[caffe2.caffe2.DeviceOption] = this
  def merge(`_message__`: caffe2.caffe2.DeviceOption, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.DeviceOption = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.DeviceOption] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.DeviceOption(
        deviceType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        randomSeed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        nodeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        numaNodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        extraInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.caffe2.DeviceOption(
    deviceType = _root_.scala.None,
    deviceId = _root_.scala.None,
    randomSeed = _root_.scala.None,
    nodeName = _root_.scala.None,
    numaNodeId = _root_.scala.None,
    extraInfo = _root_.scala.Seq.empty
  )
  final class Builder private (
    private var __deviceType: _root_.scala.Option[_root_.scala.Int],
    private var __deviceId: _root_.scala.Option[_root_.scala.Int],
    private var __randomSeed: _root_.scala.Option[_root_.scala.Int],
    private var __nodeName: _root_.scala.Option[_root_.scala.Predef.String],
    private var __numaNodeId: _root_.scala.Option[_root_.scala.Int],
    private val __extraInfo: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.DeviceOption] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = Option(_input__.readInt32())
          case 16 =>
            __deviceId = Option(_input__.readInt32())
          case 24 =>
            __randomSeed = Option(_input__.readUInt32())
          case 34 =>
            __nodeName = Option(_input__.readStringRequireUtf8())
          case 40 =>
            __numaNodeId = Option(_input__.readInt32())
          case 50 =>
            __extraInfo += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.DeviceOption = {
      caffe2.caffe2.DeviceOption(
        deviceType = __deviceType,
        deviceId = __deviceId,
        randomSeed = __randomSeed,
        nodeName = __nodeName,
        numaNodeId = __numaNodeId,
        extraInfo = __extraInfo.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.DeviceOption, caffe2.caffe2.DeviceOption.Builder] {
    def apply(): Builder = new Builder(
      __deviceType = _root_.scala.None,
      __deviceId = _root_.scala.None,
      __randomSeed = _root_.scala.None,
      __nodeName = _root_.scala.None,
      __numaNodeId = _root_.scala.None,
      __extraInfo = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.DeviceOption): Builder = new Builder(
        __deviceType = _message__.deviceType,
        __deviceId = _message__.deviceId,
        __randomSeed = _message__.randomSeed,
        __nodeName = _message__.nodeName,
        __numaNodeId = _message__.numaNodeId,
        __extraInfo = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] ++= _message__.extraInfo,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.DeviceOption.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.DeviceOption): Builder = caffe2.caffe2.DeviceOption.Builder(_message__)
  implicit class DeviceOptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.DeviceOption]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.DeviceOption](_l) {
    def deviceType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDeviceType)((c_, f_) => c_.copy(deviceType = Option(f_)))
    def optionalDeviceType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDeviceId)((c_, f_) => c_.copy(deviceId = Option(f_)))
    def optionalDeviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def randomSeed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getRandomSeed)((c_, f_) => c_.copy(randomSeed = Option(f_)))
    def optionalRandomSeed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.randomSeed)((c_, f_) => c_.copy(randomSeed = f_))
    def nodeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getNodeName)((c_, f_) => c_.copy(nodeName = Option(f_)))
    def optionalNodeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.nodeName)((c_, f_) => c_.copy(nodeName = f_))
    def numaNodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getNumaNodeId)((c_, f_) => c_.copy(numaNodeId = Option(f_)))
    def optionalNumaNodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.numaNodeId)((c_, f_) => c_.copy(numaNodeId = f_))
    def extraInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.extraInfo)((c_, f_) => c_.copy(extraInfo = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val RANDOM_SEED_FIELD_NUMBER = 3
  final val NODE_NAME_FIELD_NUMBER = 4
  final val NUMA_NODE_ID_FIELD_NUMBER = 5
  final val EXTRA_INFO_FIELD_NUMBER = 6
  def of(
    deviceType: _root_.scala.Option[_root_.scala.Int],
    deviceId: _root_.scala.Option[_root_.scala.Int],
    randomSeed: _root_.scala.Option[_root_.scala.Int],
    nodeName: _root_.scala.Option[_root_.scala.Predef.String],
    numaNodeId: _root_.scala.Option[_root_.scala.Int],
    extraInfo: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.caffe2.caffe2.DeviceOption = _root_.caffe2.caffe2.DeviceOption(
    deviceType,
    deviceId,
    randomSeed,
    nodeName,
    numaNodeId,
    extraInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.DeviceOption])
}
