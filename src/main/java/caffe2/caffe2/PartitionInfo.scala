// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2

/** Partition definition.
  *
  * @param name
  *   Name of the partition.
  * @param deviceId
  *   A list of logic device ID, indicating which devices this partition
  *   can be executed on. If empty, it means the partition won't run on
  *   device but on host CPU instead.
  * @param extraInfo
  *   Extra debug info.
  * @param backendOptions
  *   Flexible map for passing options specific to a backend.
  */
@SerialVersionUID(0L)
final case class PartitionInfo(
    name: _root_.scala.Predef.String,
    deviceId: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    extraInfo: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    backendOptions: _root_.scala.Seq[caffe2.caffe2.BackendOptions] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PartitionInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      deviceId.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      }
      if (extraInfo.isDefined) {
        val __value = extraInfo.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      backendOptions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = name
        _output__.writeString(1, __v)
      };
      deviceId.foreach { __v =>
        val __m = __v
        _output__.writeInt32(2, __m)
      };
      extraInfo.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      backendOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): PartitionInfo = copy(name = __v)
    def clearDeviceId = copy(deviceId = _root_.scala.Seq.empty)
    def addDeviceId(__vs: _root_.scala.Int*): PartitionInfo = addAllDeviceId(__vs)
    def addAllDeviceId(__vs: Iterable[_root_.scala.Int]): PartitionInfo = copy(deviceId = deviceId ++ __vs)
    def withDeviceId(__v: _root_.scala.Seq[_root_.scala.Int]): PartitionInfo = copy(deviceId = __v)
    def getExtraInfo: _root_.scala.Predef.String = extraInfo.getOrElse("")
    def clearExtraInfo: PartitionInfo = copy(extraInfo = _root_.scala.None)
    def withExtraInfo(__v: _root_.scala.Predef.String): PartitionInfo = copy(extraInfo = Option(__v))
    def clearBackendOptions = copy(backendOptions = _root_.scala.Seq.empty)
    def addBackendOptions(__vs: caffe2.caffe2.BackendOptions*): PartitionInfo = addAllBackendOptions(__vs)
    def addAllBackendOptions(__vs: Iterable[caffe2.caffe2.BackendOptions]): PartitionInfo = copy(backendOptions = backendOptions ++ __vs)
    def withBackendOptions(__v: _root_.scala.Seq[caffe2.caffe2.BackendOptions]): PartitionInfo = copy(backendOptions = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => name
        case 2 => deviceId
        case 3 => extraInfo.orNull
        case 4 => backendOptions
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PRepeated(deviceId.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 3 => extraInfo.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(backendOptions.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2.PartitionInfo
    // @@protoc_insertion_point(GeneratedMessage[caffe2.PartitionInfo])
}

object PartitionInfo extends scalapb.GeneratedMessageCompanion[caffe2.caffe2.PartitionInfo] with scalapb.HasBuilder[caffe2.caffe2.PartitionInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2.PartitionInfo] with scalapb.HasBuilder[caffe2.caffe2.PartitionInfo] = this
  def merge(`_message__`: caffe2.caffe2.PartitionInfo, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2.PartitionInfo = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2.PartitionInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2.PartitionInfo(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        extraInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        backendOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[caffe2.caffe2.BackendOptions]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2Proto.javaDescriptor.getMessageTypes().get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2Proto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = caffe2.caffe2.BackendOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.caffe2.PartitionInfo(
    name = "",
    deviceId = _root_.scala.Seq.empty,
    extraInfo = _root_.scala.None,
    backendOptions = _root_.scala.Seq.empty
  )
  final class Builder private (
    private var __name: _root_.scala.Predef.String,
    private val __deviceId: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
    private var __extraInfo: _root_.scala.Option[_root_.scala.Predef.String],
    private val __backendOptions: _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.BackendOptions],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2.PartitionInfo] {
    private var __requiredFields0: _root_.scala.Long = 0x1L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __deviceId += _input__.readInt32()
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __deviceId += _input__.readInt32()
            }
            _input__.popLimit(oldLimit)
          }
          case 26 =>
            __extraInfo = Option(_input__.readStringRequireUtf8())
          case 34 =>
            __backendOptions += _root_.scalapb.LiteParser.readMessage[caffe2.caffe2.BackendOptions](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2.PartitionInfo = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      caffe2.caffe2.PartitionInfo(
        name = __name,
        deviceId = __deviceId.result(),
        extraInfo = __extraInfo,
        backendOptions = __backendOptions.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2.PartitionInfo, caffe2.caffe2.PartitionInfo.Builder] {
    def apply(): Builder = new Builder(
      __name = "",
      __deviceId = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int],
      __extraInfo = _root_.scala.None,
      __backendOptions = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.BackendOptions],
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2.PartitionInfo): Builder = new Builder(
        __name = _message__.name,
        __deviceId = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] ++= _message__.deviceId,
        __extraInfo = _message__.extraInfo,
        __backendOptions = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.BackendOptions] ++= _message__.backendOptions,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2.PartitionInfo.Builder()
  def newBuilder(`_message__`: caffe2.caffe2.PartitionInfo): Builder = caffe2.caffe2.PartitionInfo.Builder(_message__)
  implicit class PartitionInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2.PartitionInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2.PartitionInfo](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def extraInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getExtraInfo)((c_, f_) => c_.copy(extraInfo = Option(f_)))
    def optionalExtraInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.extraInfo)((c_, f_) => c_.copy(extraInfo = f_))
    def backendOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.caffe2.BackendOptions]] = field(_.backendOptions)((c_, f_) => c_.copy(backendOptions = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val EXTRA_INFO_FIELD_NUMBER = 3
  final val BACKEND_OPTIONS_FIELD_NUMBER = 4
  def of(
    name: _root_.scala.Predef.String,
    deviceId: _root_.scala.Seq[_root_.scala.Int],
    extraInfo: _root_.scala.Option[_root_.scala.Predef.String],
    backendOptions: _root_.scala.Seq[caffe2.caffe2.BackendOptions]
  ): _root_.caffe2.caffe2.PartitionInfo = _root_.caffe2.caffe2.PartitionInfo(
    name,
    deviceId,
    extraInfo,
    backendOptions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.PartitionInfo])
}
