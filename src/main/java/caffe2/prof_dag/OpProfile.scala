// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.prof_dag

/** Represents specification of an operation cost.
  */
@SerialVersionUID(0L)
final case class OpProfile(
    idx: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    netName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    `type`: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    execTimeSecs: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OpProfile] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (idx.isDefined) {
        val __value = idx.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (netName.isDefined) {
        val __value = netName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (`type`.isDefined) {
        val __value = `type`.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (execTimeSecs.isDefined) {
        val __value = execTimeSecs.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      idx.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      netName.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      `type`.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      execTimeSecs.foreach { __v =>
        val __m = __v
        _output__.writeFloat(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getIdx: _root_.scala.Predef.String = idx.getOrElse("")
    def clearIdx: OpProfile = copy(idx = _root_.scala.None)
    def withIdx(__v: _root_.scala.Predef.String): OpProfile = copy(idx = Option(__v))
    def getNetName: _root_.scala.Predef.String = netName.getOrElse("")
    def clearNetName: OpProfile = copy(netName = _root_.scala.None)
    def withNetName(__v: _root_.scala.Predef.String): OpProfile = copy(netName = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: OpProfile = copy(`type` = _root_.scala.None)
    def withType(__v: _root_.scala.Predef.String): OpProfile = copy(`type` = Option(__v))
    def getExecTimeSecs: _root_.scala.Float = execTimeSecs.getOrElse(0.0f)
    def clearExecTimeSecs: OpProfile = copy(execTimeSecs = _root_.scala.None)
    def withExecTimeSecs(__v: _root_.scala.Float): OpProfile = copy(execTimeSecs = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => idx.orNull
        case 2 => netName.orNull
        case 3 => `type`.orNull
        case 4 => execTimeSecs.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => idx.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => netName.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => `type`.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => execTimeSecs.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.prof_dag.OpProfile
    // @@protoc_insertion_point(GeneratedMessage[caffe2.OpProfile])
}

object OpProfile extends scalapb.GeneratedMessageCompanion[caffe2.prof_dag.OpProfile] with scalapb.HasBuilder[caffe2.prof_dag.OpProfile] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.prof_dag.OpProfile] with scalapb.HasBuilder[caffe2.prof_dag.OpProfile] = this
  def merge(`_message__`: caffe2.prof_dag.OpProfile, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.prof_dag.OpProfile = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.prof_dag.OpProfile] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.prof_dag.OpProfile(
        idx = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        netName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        execTimeSecs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProfDagProtoCompanion.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProfDagProtoCompanion.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.prof_dag.OpProfile(
    idx = _root_.scala.None,
    netName = _root_.scala.None,
    `type` = _root_.scala.None,
    execTimeSecs = _root_.scala.None
  )
  final class Builder private (
    private var __idx: _root_.scala.Option[_root_.scala.Predef.String],
    private var __netName: _root_.scala.Option[_root_.scala.Predef.String],
    private var __type: _root_.scala.Option[_root_.scala.Predef.String],
    private var __execTimeSecs: _root_.scala.Option[_root_.scala.Float],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.prof_dag.OpProfile] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __idx = Option(_input__.readStringRequireUtf8())
          case 18 =>
            __netName = Option(_input__.readStringRequireUtf8())
          case 26 =>
            __type = Option(_input__.readStringRequireUtf8())
          case 37 =>
            __execTimeSecs = Option(_input__.readFloat())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.prof_dag.OpProfile = {
      caffe2.prof_dag.OpProfile(
        idx = __idx,
        netName = __netName,
        `type` = __type,
        execTimeSecs = __execTimeSecs,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.prof_dag.OpProfile, caffe2.prof_dag.OpProfile.Builder] {
    def apply(): Builder = new Builder(
      __idx = _root_.scala.None,
      __netName = _root_.scala.None,
      __type = _root_.scala.None,
      __execTimeSecs = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.prof_dag.OpProfile): Builder = new Builder(
        __idx = _message__.idx,
        __netName = _message__.netName,
        __type = _message__.`type`,
        __execTimeSecs = _message__.execTimeSecs,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.prof_dag.OpProfile.Builder()
  def newBuilder(`_message__`: caffe2.prof_dag.OpProfile): Builder = caffe2.prof_dag.OpProfile.Builder(_message__)
  implicit class OpProfileLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.prof_dag.OpProfile]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.prof_dag.OpProfile](_l) {
    def idx: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIdx)((c_, f_) => c_.copy(idx = Option(f_)))
    def optionalIdx: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.idx)((c_, f_) => c_.copy(idx = f_))
    def netName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getNetName)((c_, f_) => c_.copy(netName = Option(f_)))
    def optionalNetName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.netName)((c_, f_) => c_.copy(netName = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def execTimeSecs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getExecTimeSecs)((c_, f_) => c_.copy(execTimeSecs = Option(f_)))
    def optionalExecTimeSecs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.execTimeSecs)((c_, f_) => c_.copy(execTimeSecs = f_))
  }
  final val IDX_FIELD_NUMBER = 1
  final val NET_NAME_FIELD_NUMBER = 2
  final val TYPE_FIELD_NUMBER = 3
  final val EXEC_TIME_SECS_FIELD_NUMBER = 4
  def of(
    idx: _root_.scala.Option[_root_.scala.Predef.String],
    netName: _root_.scala.Option[_root_.scala.Predef.String],
    `type`: _root_.scala.Option[_root_.scala.Predef.String],
    execTimeSecs: _root_.scala.Option[_root_.scala.Float]
  ): _root_.caffe2.prof_dag.OpProfile = _root_.caffe2.prof_dag.OpProfile(
    idx,
    netName,
    `type`,
    execTimeSecs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.OpProfile])
}
