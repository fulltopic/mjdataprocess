// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.prof_dag

/** A two number summary for a value. It also has count for restoring.
  */
@SerialVersionUID(0L)
final case class TwoNumberStatsProto(
    mean: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    stddev: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    count: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TwoNumberStatsProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (mean.isDefined) {
        val __value = mean.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
      };
      if (stddev.isDefined) {
        val __value = stddev.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, __value)
      };
      if (count.isDefined) {
        val __value = count.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      mean.foreach { __v =>
        val __m = __v
        _output__.writeFloat(1, __m)
      };
      stddev.foreach { __v =>
        val __m = __v
        _output__.writeFloat(2, __m)
      };
      count.foreach { __v =>
        val __m = __v
        _output__.writeInt64(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getMean: _root_.scala.Float = mean.getOrElse(0.0f)
    def clearMean: TwoNumberStatsProto = copy(mean = _root_.scala.None)
    def withMean(__v: _root_.scala.Float): TwoNumberStatsProto = copy(mean = Option(__v))
    def getStddev: _root_.scala.Float = stddev.getOrElse(0.0f)
    def clearStddev: TwoNumberStatsProto = copy(stddev = _root_.scala.None)
    def withStddev(__v: _root_.scala.Float): TwoNumberStatsProto = copy(stddev = Option(__v))
    def getCount: _root_.scala.Long = count.getOrElse(0L)
    def clearCount: TwoNumberStatsProto = copy(count = _root_.scala.None)
    def withCount(__v: _root_.scala.Long): TwoNumberStatsProto = copy(count = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => mean.orNull
        case 2 => stddev.orNull
        case 3 => count.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => mean.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => stddev.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => count.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.prof_dag.TwoNumberStatsProto
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TwoNumberStatsProto])
}

object TwoNumberStatsProto extends scalapb.GeneratedMessageCompanion[caffe2.prof_dag.TwoNumberStatsProto] with scalapb.HasBuilder[caffe2.prof_dag.TwoNumberStatsProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.prof_dag.TwoNumberStatsProto] with scalapb.HasBuilder[caffe2.prof_dag.TwoNumberStatsProto] = this
  def merge(`_message__`: caffe2.prof_dag.TwoNumberStatsProto, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.prof_dag.TwoNumberStatsProto = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.prof_dag.TwoNumberStatsProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.prof_dag.TwoNumberStatsProto(
        mean = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]),
        stddev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]),
        count = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProfDagProtoCompanion.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProfDagProtoCompanion.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.prof_dag.TwoNumberStatsProto(
    mean = _root_.scala.None,
    stddev = _root_.scala.None,
    count = _root_.scala.None
  )
  final class Builder private (
    private var __mean: _root_.scala.Option[_root_.scala.Float],
    private var __stddev: _root_.scala.Option[_root_.scala.Float],
    private var __count: _root_.scala.Option[_root_.scala.Long],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.prof_dag.TwoNumberStatsProto] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 13 =>
            __mean = Option(_input__.readFloat())
          case 21 =>
            __stddev = Option(_input__.readFloat())
          case 24 =>
            __count = Option(_input__.readInt64())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.prof_dag.TwoNumberStatsProto = {
      caffe2.prof_dag.TwoNumberStatsProto(
        mean = __mean,
        stddev = __stddev,
        count = __count,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.prof_dag.TwoNumberStatsProto, caffe2.prof_dag.TwoNumberStatsProto.Builder] {
    def apply(): Builder = new Builder(
      __mean = _root_.scala.None,
      __stddev = _root_.scala.None,
      __count = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.prof_dag.TwoNumberStatsProto): Builder = new Builder(
        __mean = _message__.mean,
        __stddev = _message__.stddev,
        __count = _message__.count,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.prof_dag.TwoNumberStatsProto.Builder()
  def newBuilder(`_message__`: caffe2.prof_dag.TwoNumberStatsProto): Builder = caffe2.prof_dag.TwoNumberStatsProto.Builder(_message__)
  implicit class TwoNumberStatsProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.prof_dag.TwoNumberStatsProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.prof_dag.TwoNumberStatsProto](_l) {
    def mean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getMean)((c_, f_) => c_.copy(mean = Option(f_)))
    def optionalMean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.mean)((c_, f_) => c_.copy(mean = f_))
    def stddev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getStddev)((c_, f_) => c_.copy(stddev = Option(f_)))
    def optionalStddev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.stddev)((c_, f_) => c_.copy(stddev = f_))
    def count: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCount)((c_, f_) => c_.copy(count = Option(f_)))
    def optionalCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.count)((c_, f_) => c_.copy(count = f_))
  }
  final val MEAN_FIELD_NUMBER = 1
  final val STDDEV_FIELD_NUMBER = 2
  final val COUNT_FIELD_NUMBER = 3
  def of(
    mean: _root_.scala.Option[_root_.scala.Float],
    stddev: _root_.scala.Option[_root_.scala.Float],
    count: _root_.scala.Option[_root_.scala.Long]
  ): _root_.caffe2.prof_dag.TwoNumberStatsProto = _root_.caffe2.prof_dag.TwoNumberStatsProto(
    mean,
    stddev,
    count
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TwoNumberStatsProto])
}
