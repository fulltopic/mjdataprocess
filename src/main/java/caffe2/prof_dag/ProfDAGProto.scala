// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.prof_dag

/** Protobuf format to serialize profiler data.
  *
  * @param name
  *   The name for the operator
  * @param mean
  *   The mean execution time
  * @param stddev
  *   The standard deviation
  * @param executionTime
  *   New field to represent the numbers above, and with count.
  * @param outputProfile
  *   Blob profiles that this node outputs.
  * @param extraInfo
  *   The extra_info from the operator device option.
  */
@SerialVersionUID(0L)
final case class ProfDAGProto(
    name: _root_.scala.Predef.String,
    mean: _root_.scala.Float,
    stddev: _root_.scala.Float,
    executionTime: _root_.scala.Option[caffe2.prof_dag.TwoNumberStatsProto] = _root_.scala.None,
    outputProfile: _root_.scala.Seq[caffe2.prof_dag.BlobProfile] = _root_.scala.Seq.empty,
    extraInfo: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProfDAGProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      
      {
        val __value = mean
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, __value)
      };
      
      {
        val __value = stddev
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
      };
      if (executionTime.isDefined) {
        val __value = executionTime.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      outputProfile.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      extraInfo.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = name
        _output__.writeString(1, __v)
      };
      
      {
        val __v = mean
        _output__.writeFloat(2, __v)
      };
      
      {
        val __v = stddev
        _output__.writeFloat(3, __v)
      };
      executionTime.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputProfile.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      extraInfo.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): ProfDAGProto = copy(name = __v)
    def withMean(__v: _root_.scala.Float): ProfDAGProto = copy(mean = __v)
    def withStddev(__v: _root_.scala.Float): ProfDAGProto = copy(stddev = __v)
    def getExecutionTime: caffe2.prof_dag.TwoNumberStatsProto = executionTime.getOrElse(caffe2.prof_dag.TwoNumberStatsProto.defaultInstance)
    def clearExecutionTime: ProfDAGProto = copy(executionTime = _root_.scala.None)
    def withExecutionTime(__v: caffe2.prof_dag.TwoNumberStatsProto): ProfDAGProto = copy(executionTime = Option(__v))
    def clearOutputProfile = copy(outputProfile = _root_.scala.Seq.empty)
    def addOutputProfile(__vs: caffe2.prof_dag.BlobProfile*): ProfDAGProto = addAllOutputProfile(__vs)
    def addAllOutputProfile(__vs: Iterable[caffe2.prof_dag.BlobProfile]): ProfDAGProto = copy(outputProfile = outputProfile ++ __vs)
    def withOutputProfile(__v: _root_.scala.Seq[caffe2.prof_dag.BlobProfile]): ProfDAGProto = copy(outputProfile = __v)
    def clearExtraInfo = copy(extraInfo = _root_.scala.Seq.empty)
    def addExtraInfo(__vs: _root_.scala.Predef.String*): ProfDAGProto = addAllExtraInfo(__vs)
    def addAllExtraInfo(__vs: Iterable[_root_.scala.Predef.String]): ProfDAGProto = copy(extraInfo = extraInfo ++ __vs)
    def withExtraInfo(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ProfDAGProto = copy(extraInfo = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => name
        case 2 => mean
        case 3 => stddev
        case 4 => executionTime.orNull
        case 5 => outputProfile
        case 7 => extraInfo
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PFloat(mean)
        case 3 => _root_.scalapb.descriptors.PFloat(stddev)
        case 4 => executionTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(outputProfile.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(extraInfo.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.prof_dag.ProfDAGProto
    // @@protoc_insertion_point(GeneratedMessage[caffe2.ProfDAGProto])
}

object ProfDAGProto extends scalapb.GeneratedMessageCompanion[caffe2.prof_dag.ProfDAGProto] with scalapb.HasBuilder[caffe2.prof_dag.ProfDAGProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.prof_dag.ProfDAGProto] with scalapb.HasBuilder[caffe2.prof_dag.ProfDAGProto] = this
  def merge(`_message__`: caffe2.prof_dag.ProfDAGProto, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.prof_dag.ProfDAGProto = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.prof_dag.ProfDAGProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.prof_dag.ProfDAGProto(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        mean = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Float],
        stddev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Float],
        executionTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[caffe2.prof_dag.TwoNumberStatsProto]]),
        outputProfile = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[caffe2.prof_dag.BlobProfile]]).getOrElse(_root_.scala.Seq.empty),
        extraInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProfDagProtoCompanion.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProfDagProtoCompanion.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = caffe2.prof_dag.TwoNumberStatsProto
      case 5 => __out = caffe2.prof_dag.BlobProfile
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.prof_dag.ProfDAGProto(
    name = "",
    mean = 0.0f,
    stddev = 0.0f,
    executionTime = _root_.scala.None,
    outputProfile = _root_.scala.Seq.empty,
    extraInfo = _root_.scala.Seq.empty
  )
  final class Builder private (
    private var __name: _root_.scala.Predef.String,
    private var __mean: _root_.scala.Float,
    private var __stddev: _root_.scala.Float,
    private var __executionTime: _root_.scala.Option[caffe2.prof_dag.TwoNumberStatsProto],
    private val __outputProfile: _root_.scala.collection.immutable.VectorBuilder[caffe2.prof_dag.BlobProfile],
    private val __extraInfo: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.prof_dag.ProfDAGProto] {
    private var __requiredFields0: _root_.scala.Long = 0x7L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 21 =>
            __mean = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 29 =>
            __stddev = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __executionTime = Option(__executionTime.fold(_root_.scalapb.LiteParser.readMessage[caffe2.prof_dag.TwoNumberStatsProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __outputProfile += _root_.scalapb.LiteParser.readMessage[caffe2.prof_dag.BlobProfile](_input__)
          case 58 =>
            __extraInfo += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.prof_dag.ProfDAGProto = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      caffe2.prof_dag.ProfDAGProto(
        name = __name,
        mean = __mean,
        stddev = __stddev,
        executionTime = __executionTime,
        outputProfile = __outputProfile.result(),
        extraInfo = __extraInfo.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.prof_dag.ProfDAGProto, caffe2.prof_dag.ProfDAGProto.Builder] {
    def apply(): Builder = new Builder(
      __name = "",
      __mean = 0.0f,
      __stddev = 0.0f,
      __executionTime = _root_.scala.None,
      __outputProfile = new _root_.scala.collection.immutable.VectorBuilder[caffe2.prof_dag.BlobProfile],
      __extraInfo = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String],
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.prof_dag.ProfDAGProto): Builder = new Builder(
        __name = _message__.name,
        __mean = _message__.mean,
        __stddev = _message__.stddev,
        __executionTime = _message__.executionTime,
        __outputProfile = new _root_.scala.collection.immutable.VectorBuilder[caffe2.prof_dag.BlobProfile] ++= _message__.outputProfile,
        __extraInfo = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] ++= _message__.extraInfo,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.prof_dag.ProfDAGProto.Builder()
  def newBuilder(`_message__`: caffe2.prof_dag.ProfDAGProto): Builder = caffe2.prof_dag.ProfDAGProto.Builder(_message__)
  implicit class ProfDAGProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.prof_dag.ProfDAGProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.prof_dag.ProfDAGProto](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def mean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.mean)((c_, f_) => c_.copy(mean = f_))
    def stddev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.stddev)((c_, f_) => c_.copy(stddev = f_))
    def executionTime: _root_.scalapb.lenses.Lens[UpperPB, caffe2.prof_dag.TwoNumberStatsProto] = field(_.getExecutionTime)((c_, f_) => c_.copy(executionTime = Option(f_)))
    def optionalExecutionTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.prof_dag.TwoNumberStatsProto]] = field(_.executionTime)((c_, f_) => c_.copy(executionTime = f_))
    def outputProfile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.prof_dag.BlobProfile]] = field(_.outputProfile)((c_, f_) => c_.copy(outputProfile = f_))
    def extraInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.extraInfo)((c_, f_) => c_.copy(extraInfo = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val MEAN_FIELD_NUMBER = 2
  final val STDDEV_FIELD_NUMBER = 3
  final val EXECUTION_TIME_FIELD_NUMBER = 4
  final val OUTPUT_PROFILE_FIELD_NUMBER = 5
  final val EXTRA_INFO_FIELD_NUMBER = 7
  def of(
    name: _root_.scala.Predef.String,
    mean: _root_.scala.Float,
    stddev: _root_.scala.Float,
    executionTime: _root_.scala.Option[caffe2.prof_dag.TwoNumberStatsProto],
    outputProfile: _root_.scala.Seq[caffe2.prof_dag.BlobProfile],
    extraInfo: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.caffe2.prof_dag.ProfDAGProto = _root_.caffe2.prof_dag.ProfDAGProto(
    name,
    mean,
    stddev,
    executionTime,
    outputProfile,
    extraInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.ProfDAGProto])
}
