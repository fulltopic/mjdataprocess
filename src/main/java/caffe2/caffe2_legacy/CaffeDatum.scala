// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.caffe2_legacy

/** Original Caffe1 Datum copy: this is used in image input op to allow us to
  * load caffe1 serialized datum without having to regenerate the database.
  *
  * @param data
  *   the actual image data, in bytes
  * @param floatData
  *   Optionally, the datum could also hold float data.
  * @param encoded
  *   If true data contains an encoded image that need to be decoded
  */
@SerialVersionUID(0L)
final case class CaffeDatum(
    channels: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    height: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    width: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    data: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None,
    label: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    floatData: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    encoded: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CaffeDatum] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (channels.isDefined) {
        val __value = channels.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      if (height.isDefined) {
        val __value = height.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (width.isDefined) {
        val __value = width.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      };
      if (data.isDefined) {
        val __value = data.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
      };
      if (label.isDefined) {
        val __value = label.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
      };
      __size += 5 * floatData.size
      if (encoded.isDefined) {
        val __value = encoded.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      channels.foreach { __v =>
        val __m = __v
        _output__.writeInt32(1, __m)
      };
      height.foreach { __v =>
        val __m = __v
        _output__.writeInt32(2, __m)
      };
      width.foreach { __v =>
        val __m = __v
        _output__.writeInt32(3, __m)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeBytes(4, __m)
      };
      label.foreach { __v =>
        val __m = __v
        _output__.writeInt32(5, __m)
      };
      floatData.foreach { __v =>
        val __m = __v
        _output__.writeFloat(6, __m)
      };
      encoded.foreach { __v =>
        val __m = __v
        _output__.writeBool(7, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getChannels: _root_.scala.Int = channels.getOrElse(0)
    def clearChannels: CaffeDatum = copy(channels = _root_.scala.None)
    def withChannels(__v: _root_.scala.Int): CaffeDatum = copy(channels = Option(__v))
    def getHeight: _root_.scala.Int = height.getOrElse(0)
    def clearHeight: CaffeDatum = copy(height = _root_.scala.None)
    def withHeight(__v: _root_.scala.Int): CaffeDatum = copy(height = Option(__v))
    def getWidth: _root_.scala.Int = width.getOrElse(0)
    def clearWidth: CaffeDatum = copy(width = _root_.scala.None)
    def withWidth(__v: _root_.scala.Int): CaffeDatum = copy(width = Option(__v))
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: CaffeDatum = copy(data = _root_.scala.None)
    def withData(__v: _root_.com.google.protobuf.ByteString): CaffeDatum = copy(data = Option(__v))
    def getLabel: _root_.scala.Int = label.getOrElse(0)
    def clearLabel: CaffeDatum = copy(label = _root_.scala.None)
    def withLabel(__v: _root_.scala.Int): CaffeDatum = copy(label = Option(__v))
    def clearFloatData = copy(floatData = _root_.scala.Seq.empty)
    def addFloatData(__vs: _root_.scala.Float*): CaffeDatum = addAllFloatData(__vs)
    def addAllFloatData(__vs: Iterable[_root_.scala.Float]): CaffeDatum = copy(floatData = floatData ++ __vs)
    def withFloatData(__v: _root_.scala.Seq[_root_.scala.Float]): CaffeDatum = copy(floatData = __v)
    def getEncoded: _root_.scala.Boolean = encoded.getOrElse(false)
    def clearEncoded: CaffeDatum = copy(encoded = _root_.scala.None)
    def withEncoded(__v: _root_.scala.Boolean): CaffeDatum = copy(encoded = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => channels.orNull
        case 2 => height.orNull
        case 3 => width.orNull
        case 4 => data.orNull
        case 5 => label.orNull
        case 6 => floatData
        case 7 => encoded.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => channels.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => height.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => width.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => label.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(floatData.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 7 => encoded.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.caffe2_legacy.CaffeDatum
    // @@protoc_insertion_point(GeneratedMessage[caffe2.CaffeDatum])
}

object CaffeDatum extends scalapb.GeneratedMessageCompanion[caffe2.caffe2_legacy.CaffeDatum] with scalapb.HasBuilder[caffe2.caffe2_legacy.CaffeDatum] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.caffe2_legacy.CaffeDatum] with scalapb.HasBuilder[caffe2.caffe2_legacy.CaffeDatum] = this
  def merge(`_message__`: caffe2.caffe2_legacy.CaffeDatum, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.caffe2_legacy.CaffeDatum = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.caffe2_legacy.CaffeDatum] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.caffe2_legacy.CaffeDatum(
        channels = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        height = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        width = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]),
        label = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        floatData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        encoded = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Caffe2LegacyProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Caffe2LegacyProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.caffe2_legacy.CaffeDatum(
    channels = _root_.scala.None,
    height = _root_.scala.None,
    width = _root_.scala.None,
    data = _root_.scala.None,
    label = _root_.scala.None,
    floatData = _root_.scala.Seq.empty,
    encoded = _root_.scala.None
  )
  final class Builder private (
    private var __channels: _root_.scala.Option[_root_.scala.Int],
    private var __height: _root_.scala.Option[_root_.scala.Int],
    private var __width: _root_.scala.Option[_root_.scala.Int],
    private var __data: _root_.scala.Option[_root_.com.google.protobuf.ByteString],
    private var __label: _root_.scala.Option[_root_.scala.Int],
    private val __floatData: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float],
    private var __encoded: _root_.scala.Option[_root_.scala.Boolean],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.caffe2_legacy.CaffeDatum] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __channels = Option(_input__.readInt32())
          case 16 =>
            __height = Option(_input__.readInt32())
          case 24 =>
            __width = Option(_input__.readInt32())
          case 34 =>
            __data = Option(_input__.readBytes())
          case 40 =>
            __label = Option(_input__.readInt32())
          case 53 =>
            __floatData += _input__.readFloat()
          case 50 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __floatData += _input__.readFloat()
            }
            _input__.popLimit(oldLimit)
          }
          case 56 =>
            __encoded = Option(_input__.readBool())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.caffe2_legacy.CaffeDatum = {
      caffe2.caffe2_legacy.CaffeDatum(
        channels = __channels,
        height = __height,
        width = __width,
        data = __data,
        label = __label,
        floatData = __floatData.result(),
        encoded = __encoded,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.caffe2_legacy.CaffeDatum, caffe2.caffe2_legacy.CaffeDatum.Builder] {
    def apply(): Builder = new Builder(
      __channels = _root_.scala.None,
      __height = _root_.scala.None,
      __width = _root_.scala.None,
      __data = _root_.scala.None,
      __label = _root_.scala.None,
      __floatData = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float],
      __encoded = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.caffe2_legacy.CaffeDatum): Builder = new Builder(
        __channels = _message__.channels,
        __height = _message__.height,
        __width = _message__.width,
        __data = _message__.data,
        __label = _message__.label,
        __floatData = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] ++= _message__.floatData,
        __encoded = _message__.encoded,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.caffe2_legacy.CaffeDatum.Builder()
  def newBuilder(`_message__`: caffe2.caffe2_legacy.CaffeDatum): Builder = caffe2.caffe2_legacy.CaffeDatum.Builder(_message__)
  implicit class CaffeDatumLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.caffe2_legacy.CaffeDatum]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.caffe2_legacy.CaffeDatum](_l) {
    def channels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getChannels)((c_, f_) => c_.copy(channels = Option(f_)))
    def optionalChannels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.channels)((c_, f_) => c_.copy(channels = f_))
    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getHeight)((c_, f_) => c_.copy(height = Option(f_)))
    def optionalHeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def width: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getWidth)((c_, f_) => c_.copy(width = Option(f_)))
    def optionalWidth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.width)((c_, f_) => c_.copy(width = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def label: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLabel)((c_, f_) => c_.copy(label = Option(f_)))
    def optionalLabel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.label)((c_, f_) => c_.copy(label = f_))
    def floatData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.floatData)((c_, f_) => c_.copy(floatData = f_))
    def encoded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getEncoded)((c_, f_) => c_.copy(encoded = Option(f_)))
    def optionalEncoded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.encoded)((c_, f_) => c_.copy(encoded = f_))
  }
  final val CHANNELS_FIELD_NUMBER = 1
  final val HEIGHT_FIELD_NUMBER = 2
  final val WIDTH_FIELD_NUMBER = 3
  final val DATA_FIELD_NUMBER = 4
  final val LABEL_FIELD_NUMBER = 5
  final val FLOAT_DATA_FIELD_NUMBER = 6
  final val ENCODED_FIELD_NUMBER = 7
  def of(
    channels: _root_.scala.Option[_root_.scala.Int],
    height: _root_.scala.Option[_root_.scala.Int],
    width: _root_.scala.Option[_root_.scala.Int],
    data: _root_.scala.Option[_root_.com.google.protobuf.ByteString],
    label: _root_.scala.Option[_root_.scala.Int],
    floatData: _root_.scala.Seq[_root_.scala.Float],
    encoded: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.caffe2.caffe2_legacy.CaffeDatum = _root_.caffe2.caffe2_legacy.CaffeDatum(
    channels,
    height,
    width,
    data,
    label,
    floatData,
    encoded
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.CaffeDatum])
}
