// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package caffe2.hsm

/** Protobuf format to accept hierarchy for hierarchical softmax operator.
  * TreeProto points to the root node.
  */
@SerialVersionUID(0L)
final case class TreeProto(
    rootNode: _root_.scala.Option[caffe2.hsm.NodeProto] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TreeProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (rootNode.isDefined) {
        val __value = rootNode.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      rootNode.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getRootNode: caffe2.hsm.NodeProto = rootNode.getOrElse(caffe2.hsm.NodeProto.defaultInstance)
    def clearRootNode: TreeProto = copy(rootNode = _root_.scala.None)
    def withRootNode(__v: caffe2.hsm.NodeProto): TreeProto = copy(rootNode = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rootNode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => rootNode.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = caffe2.hsm.TreeProto
    // @@protoc_insertion_point(GeneratedMessage[caffe2.TreeProto])
}

object TreeProto extends scalapb.GeneratedMessageCompanion[caffe2.hsm.TreeProto] with scalapb.HasBuilder[caffe2.hsm.TreeProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[caffe2.hsm.TreeProto] with scalapb.HasBuilder[caffe2.hsm.TreeProto] = this
  def merge(`_message__`: caffe2.hsm.TreeProto, `_input__`: _root_.com.google.protobuf.CodedInputStream): caffe2.hsm.TreeProto = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[caffe2.hsm.TreeProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      caffe2.hsm.TreeProto(
        rootNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[caffe2.hsm.NodeProto]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HsmProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HsmProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = caffe2.hsm.NodeProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = caffe2.hsm.TreeProto(
    rootNode = _root_.scala.None
  )
  final class Builder private (
    private var __rootNode: _root_.scala.Option[caffe2.hsm.NodeProto],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[caffe2.hsm.TreeProto] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __rootNode = Option(__rootNode.fold(_root_.scalapb.LiteParser.readMessage[caffe2.hsm.NodeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): caffe2.hsm.TreeProto = {
      caffe2.hsm.TreeProto(
        rootNode = __rootNode,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[caffe2.hsm.TreeProto, caffe2.hsm.TreeProto.Builder] {
    def apply(): Builder = new Builder(
      __rootNode = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: caffe2.hsm.TreeProto): Builder = new Builder(
        __rootNode = _message__.rootNode,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = caffe2.hsm.TreeProto.Builder()
  def newBuilder(`_message__`: caffe2.hsm.TreeProto): Builder = caffe2.hsm.TreeProto.Builder(_message__)
  implicit class TreeProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, caffe2.hsm.TreeProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, caffe2.hsm.TreeProto](_l) {
    def rootNode: _root_.scalapb.lenses.Lens[UpperPB, caffe2.hsm.NodeProto] = field(_.getRootNode)((c_, f_) => c_.copy(rootNode = Option(f_)))
    def optionalRootNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[caffe2.hsm.NodeProto]] = field(_.rootNode)((c_, f_) => c_.copy(rootNode = f_))
  }
  final val ROOT_NODE_FIELD_NUMBER = 1
  def of(
    rootNode: _root_.scala.Option[caffe2.hsm.NodeProto]
  ): _root_.caffe2.hsm.TreeProto = _root_.caffe2.hsm.TreeProto(
    rootNode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[caffe2.TreeProto])
}
