// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package torch.torch

/** @param pickleArena
  *   because the old pickle modules may not be supported by torch_script,
  *   have to stored as pickle_arena at this moment.
  * @param cppArena
  *   should be exposed by the Class Archive, so user can save
  *   module specific data which cannot be store in the graph or torch_script
  * @param parameters
  *   the parameters of this module
  * @param optimize
  *   whether apply the optimizations to this module, only applicable to
  *   script modules
  * @param getStateAttributeId
  *   Used for retrieving module state from the pickled IValues table
  */
@SerialVersionUID(0L)
final case class ModuleDef(
    submodules: _root_.scala.Seq[torch.torch.ModuleDef] = _root_.scala.Seq.empty,
    torchscriptArena: _root_.scala.Option[torch.torch.RecordRef] = _root_.scala.None,
    caffe2Nets: _root_.scala.Seq[caffe2.caffe2.NetDef] = _root_.scala.Seq.empty,
    pickleArena: _root_.scala.Option[torch.torch.RecordRef] = _root_.scala.None,
    cppArena: _root_.scala.Option[torch.torch.RecordRef] = _root_.scala.None,
    parameters: _root_.scala.Seq[torch.torch.ParameterDef] = _root_.scala.Seq.empty,
    name: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    optimize: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    attributes: _root_.scala.Seq[torch.torch.AttributeDef] = _root_.scala.Seq.empty,
    getStateAttributeId: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    torchscriptDebugArena: _root_.scala.Option[torch.torch.RecordRef] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ModuleDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      submodules.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (torchscriptArena.isDefined) {
        val __value = torchscriptArena.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      caffe2Nets.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (pickleArena.isDefined) {
        val __value = pickleArena.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (cppArena.isDefined) {
        val __value = cppArena.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      parameters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (name.isDefined) {
        val __value = name.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      };
      if (optimize.isDefined) {
        val __value = optimize.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
      };
      attributes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (getStateAttributeId.isDefined) {
        val __value = getStateAttributeId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, __value)
      };
      if (torchscriptDebugArena.isDefined) {
        val __value = torchscriptDebugArena.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      submodules.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      torchscriptArena.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      caffe2Nets.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      pickleArena.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cppArena.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      optimize.foreach { __v =>
        val __m = __v
        _output__.writeBool(8, __m)
      };
      attributes.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      getStateAttributeId.foreach { __v =>
        val __m = __v
        _output__.writeInt64(10, __m)
      };
      torchscriptDebugArena.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearSubmodules = copy(submodules = _root_.scala.Seq.empty)
    def addSubmodules(__vs: torch.torch.ModuleDef*): ModuleDef = addAllSubmodules(__vs)
    def addAllSubmodules(__vs: Iterable[torch.torch.ModuleDef]): ModuleDef = copy(submodules = submodules ++ __vs)
    def withSubmodules(__v: _root_.scala.Seq[torch.torch.ModuleDef]): ModuleDef = copy(submodules = __v)
    def getTorchscriptArena: torch.torch.RecordRef = torchscriptArena.getOrElse(torch.torch.RecordRef.defaultInstance)
    def clearTorchscriptArena: ModuleDef = copy(torchscriptArena = _root_.scala.None)
    def withTorchscriptArena(__v: torch.torch.RecordRef): ModuleDef = copy(torchscriptArena = Option(__v))
    def clearCaffe2Nets = copy(caffe2Nets = _root_.scala.Seq.empty)
    def addCaffe2Nets(__vs: caffe2.caffe2.NetDef*): ModuleDef = addAllCaffe2Nets(__vs)
    def addAllCaffe2Nets(__vs: Iterable[caffe2.caffe2.NetDef]): ModuleDef = copy(caffe2Nets = caffe2Nets ++ __vs)
    def withCaffe2Nets(__v: _root_.scala.Seq[caffe2.caffe2.NetDef]): ModuleDef = copy(caffe2Nets = __v)
    def getPickleArena: torch.torch.RecordRef = pickleArena.getOrElse(torch.torch.RecordRef.defaultInstance)
    def clearPickleArena: ModuleDef = copy(pickleArena = _root_.scala.None)
    def withPickleArena(__v: torch.torch.RecordRef): ModuleDef = copy(pickleArena = Option(__v))
    def getCppArena: torch.torch.RecordRef = cppArena.getOrElse(torch.torch.RecordRef.defaultInstance)
    def clearCppArena: ModuleDef = copy(cppArena = _root_.scala.None)
    def withCppArena(__v: torch.torch.RecordRef): ModuleDef = copy(cppArena = Option(__v))
    def clearParameters = copy(parameters = _root_.scala.Seq.empty)
    def addParameters(__vs: torch.torch.ParameterDef*): ModuleDef = addAllParameters(__vs)
    def addAllParameters(__vs: Iterable[torch.torch.ParameterDef]): ModuleDef = copy(parameters = parameters ++ __vs)
    def withParameters(__v: _root_.scala.Seq[torch.torch.ParameterDef]): ModuleDef = copy(parameters = __v)
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: ModuleDef = copy(name = _root_.scala.None)
    def withName(__v: _root_.scala.Predef.String): ModuleDef = copy(name = Option(__v))
    def getOptimize: _root_.scala.Boolean = optimize.getOrElse(false)
    def clearOptimize: ModuleDef = copy(optimize = _root_.scala.None)
    def withOptimize(__v: _root_.scala.Boolean): ModuleDef = copy(optimize = Option(__v))
    def clearAttributes = copy(attributes = _root_.scala.Seq.empty)
    def addAttributes(__vs: torch.torch.AttributeDef*): ModuleDef = addAllAttributes(__vs)
    def addAllAttributes(__vs: Iterable[torch.torch.AttributeDef]): ModuleDef = copy(attributes = attributes ++ __vs)
    def withAttributes(__v: _root_.scala.Seq[torch.torch.AttributeDef]): ModuleDef = copy(attributes = __v)
    def getGetStateAttributeId: _root_.scala.Long = getStateAttributeId.getOrElse(0L)
    def clearGetStateAttributeId: ModuleDef = copy(getStateAttributeId = _root_.scala.None)
    def withGetStateAttributeId(__v: _root_.scala.Long): ModuleDef = copy(getStateAttributeId = Option(__v))
    def getTorchscriptDebugArena: torch.torch.RecordRef = torchscriptDebugArena.getOrElse(torch.torch.RecordRef.defaultInstance)
    def clearTorchscriptDebugArena: ModuleDef = copy(torchscriptDebugArena = _root_.scala.None)
    def withTorchscriptDebugArena(__v: torch.torch.RecordRef): ModuleDef = copy(torchscriptDebugArena = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => submodules
        case 2 => torchscriptArena.orNull
        case 3 => caffe2Nets
        case 4 => pickleArena.orNull
        case 5 => cppArena.orNull
        case 6 => parameters
        case 7 => name.orNull
        case 8 => optimize.orNull
        case 9 => attributes
        case 10 => getStateAttributeId.orNull
        case 11 => torchscriptDebugArena.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(submodules.iterator.map(_.toPMessage).toVector)
        case 2 => torchscriptArena.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(caffe2Nets.iterator.map(_.toPMessage).toVector)
        case 4 => pickleArena.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => cppArena.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(parameters.iterator.map(_.toPMessage).toVector)
        case 7 => name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => optimize.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(attributes.iterator.map(_.toPMessage).toVector)
        case 10 => getStateAttributeId.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => torchscriptDebugArena.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = torch.torch.ModuleDef
    // @@protoc_insertion_point(GeneratedMessage[torch.ModuleDef])
}

object ModuleDef extends scalapb.GeneratedMessageCompanion[torch.torch.ModuleDef] with scalapb.HasBuilder[torch.torch.ModuleDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[torch.torch.ModuleDef] with scalapb.HasBuilder[torch.torch.ModuleDef] = this
  def merge(`_message__`: torch.torch.ModuleDef, `_input__`: _root_.com.google.protobuf.CodedInputStream): torch.torch.ModuleDef = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[torch.torch.ModuleDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      torch.torch.ModuleDef(
        submodules = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[torch.torch.ModuleDef]]).getOrElse(_root_.scala.Seq.empty),
        torchscriptArena = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[torch.torch.RecordRef]]),
        caffe2Nets = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[caffe2.caffe2.NetDef]]).getOrElse(_root_.scala.Seq.empty),
        pickleArena = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[torch.torch.RecordRef]]),
        cppArena = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[torch.torch.RecordRef]]),
        parameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[torch.torch.ParameterDef]]).getOrElse(_root_.scala.Seq.empty),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        optimize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        attributes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[torch.torch.AttributeDef]]).getOrElse(_root_.scala.Seq.empty),
        getStateAttributeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        torchscriptDebugArena = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[torch.torch.RecordRef]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TorchProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TorchProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = torch.torch.ModuleDef
      case 2 => __out = torch.torch.RecordRef
      case 3 => __out = caffe2.caffe2.NetDef
      case 4 => __out = torch.torch.RecordRef
      case 5 => __out = torch.torch.RecordRef
      case 6 => __out = torch.torch.ParameterDef
      case 9 => __out = torch.torch.AttributeDef
      case 11 => __out = torch.torch.RecordRef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = torch.torch.ModuleDef(
    submodules = _root_.scala.Seq.empty,
    torchscriptArena = _root_.scala.None,
    caffe2Nets = _root_.scala.Seq.empty,
    pickleArena = _root_.scala.None,
    cppArena = _root_.scala.None,
    parameters = _root_.scala.Seq.empty,
    name = _root_.scala.None,
    optimize = _root_.scala.None,
    attributes = _root_.scala.Seq.empty,
    getStateAttributeId = _root_.scala.None,
    torchscriptDebugArena = _root_.scala.None
  )
  final class Builder private (
    private val __submodules: _root_.scala.collection.immutable.VectorBuilder[torch.torch.ModuleDef],
    private var __torchscriptArena: _root_.scala.Option[torch.torch.RecordRef],
    private val __caffe2Nets: _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.NetDef],
    private var __pickleArena: _root_.scala.Option[torch.torch.RecordRef],
    private var __cppArena: _root_.scala.Option[torch.torch.RecordRef],
    private val __parameters: _root_.scala.collection.immutable.VectorBuilder[torch.torch.ParameterDef],
    private var __name: _root_.scala.Option[_root_.scala.Predef.String],
    private var __optimize: _root_.scala.Option[_root_.scala.Boolean],
    private val __attributes: _root_.scala.collection.immutable.VectorBuilder[torch.torch.AttributeDef],
    private var __getStateAttributeId: _root_.scala.Option[_root_.scala.Long],
    private var __torchscriptDebugArena: _root_.scala.Option[torch.torch.RecordRef],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[torch.torch.ModuleDef] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __submodules += _root_.scalapb.LiteParser.readMessage[torch.torch.ModuleDef](_input__)
          case 18 =>
            __torchscriptArena = Option(__torchscriptArena.fold(_root_.scalapb.LiteParser.readMessage[torch.torch.RecordRef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __caffe2Nets += _root_.scalapb.LiteParser.readMessage[caffe2.caffe2.NetDef](_input__)
          case 34 =>
            __pickleArena = Option(__pickleArena.fold(_root_.scalapb.LiteParser.readMessage[torch.torch.RecordRef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __cppArena = Option(__cppArena.fold(_root_.scalapb.LiteParser.readMessage[torch.torch.RecordRef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 50 =>
            __parameters += _root_.scalapb.LiteParser.readMessage[torch.torch.ParameterDef](_input__)
          case 58 =>
            __name = Option(_input__.readStringRequireUtf8())
          case 64 =>
            __optimize = Option(_input__.readBool())
          case 74 =>
            __attributes += _root_.scalapb.LiteParser.readMessage[torch.torch.AttributeDef](_input__)
          case 80 =>
            __getStateAttributeId = Option(_input__.readInt64())
          case 90 =>
            __torchscriptDebugArena = Option(__torchscriptDebugArena.fold(_root_.scalapb.LiteParser.readMessage[torch.torch.RecordRef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): torch.torch.ModuleDef = {
      torch.torch.ModuleDef(
        submodules = __submodules.result(),
        torchscriptArena = __torchscriptArena,
        caffe2Nets = __caffe2Nets.result(),
        pickleArena = __pickleArena,
        cppArena = __cppArena,
        parameters = __parameters.result(),
        name = __name,
        optimize = __optimize,
        attributes = __attributes.result(),
        getStateAttributeId = __getStateAttributeId,
        torchscriptDebugArena = __torchscriptDebugArena,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[torch.torch.ModuleDef, torch.torch.ModuleDef.Builder] {
    def apply(): Builder = new Builder(
      __submodules = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.ModuleDef],
      __torchscriptArena = _root_.scala.None,
      __caffe2Nets = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.NetDef],
      __pickleArena = _root_.scala.None,
      __cppArena = _root_.scala.None,
      __parameters = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.ParameterDef],
      __name = _root_.scala.None,
      __optimize = _root_.scala.None,
      __attributes = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.AttributeDef],
      __getStateAttributeId = _root_.scala.None,
      __torchscriptDebugArena = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: torch.torch.ModuleDef): Builder = new Builder(
        __submodules = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.ModuleDef] ++= _message__.submodules,
        __torchscriptArena = _message__.torchscriptArena,
        __caffe2Nets = new _root_.scala.collection.immutable.VectorBuilder[caffe2.caffe2.NetDef] ++= _message__.caffe2Nets,
        __pickleArena = _message__.pickleArena,
        __cppArena = _message__.cppArena,
        __parameters = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.ParameterDef] ++= _message__.parameters,
        __name = _message__.name,
        __optimize = _message__.optimize,
        __attributes = new _root_.scala.collection.immutable.VectorBuilder[torch.torch.AttributeDef] ++= _message__.attributes,
        __getStateAttributeId = _message__.getStateAttributeId,
        __torchscriptDebugArena = _message__.torchscriptDebugArena,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = torch.torch.ModuleDef.Builder()
  def newBuilder(`_message__`: torch.torch.ModuleDef): Builder = torch.torch.ModuleDef.Builder(_message__)
  implicit class ModuleDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.ModuleDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, torch.torch.ModuleDef](_l) {
    def submodules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[torch.torch.ModuleDef]] = field(_.submodules)((c_, f_) => c_.copy(submodules = f_))
    def torchscriptArena: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.RecordRef] = field(_.getTorchscriptArena)((c_, f_) => c_.copy(torchscriptArena = Option(f_)))
    def optionalTorchscriptArena: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[torch.torch.RecordRef]] = field(_.torchscriptArena)((c_, f_) => c_.copy(torchscriptArena = f_))
    def caffe2Nets: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[caffe2.caffe2.NetDef]] = field(_.caffe2Nets)((c_, f_) => c_.copy(caffe2Nets = f_))
    def pickleArena: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.RecordRef] = field(_.getPickleArena)((c_, f_) => c_.copy(pickleArena = Option(f_)))
    def optionalPickleArena: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[torch.torch.RecordRef]] = field(_.pickleArena)((c_, f_) => c_.copy(pickleArena = f_))
    def cppArena: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.RecordRef] = field(_.getCppArena)((c_, f_) => c_.copy(cppArena = Option(f_)))
    def optionalCppArena: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[torch.torch.RecordRef]] = field(_.cppArena)((c_, f_) => c_.copy(cppArena = f_))
    def parameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[torch.torch.ParameterDef]] = field(_.parameters)((c_, f_) => c_.copy(parameters = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def optimize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getOptimize)((c_, f_) => c_.copy(optimize = Option(f_)))
    def optionalOptimize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.optimize)((c_, f_) => c_.copy(optimize = f_))
    def attributes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[torch.torch.AttributeDef]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
    def getStateAttributeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getGetStateAttributeId)((c_, f_) => c_.copy(getStateAttributeId = Option(f_)))
    def optionalGetStateAttributeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.getStateAttributeId)((c_, f_) => c_.copy(getStateAttributeId = f_))
    def torchscriptDebugArena: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.RecordRef] = field(_.getTorchscriptDebugArena)((c_, f_) => c_.copy(torchscriptDebugArena = Option(f_)))
    def optionalTorchscriptDebugArena: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[torch.torch.RecordRef]] = field(_.torchscriptDebugArena)((c_, f_) => c_.copy(torchscriptDebugArena = f_))
  }
  final val SUBMODULES_FIELD_NUMBER = 1
  final val TORCHSCRIPT_ARENA_FIELD_NUMBER = 2
  final val CAFFE2_NETS_FIELD_NUMBER = 3
  final val PICKLE_ARENA_FIELD_NUMBER = 4
  final val CPP_ARENA_FIELD_NUMBER = 5
  final val PARAMETERS_FIELD_NUMBER = 6
  final val NAME_FIELD_NUMBER = 7
  final val OPTIMIZE_FIELD_NUMBER = 8
  final val ATTRIBUTES_FIELD_NUMBER = 9
  final val GET_STATE_ATTRIBUTE_ID_FIELD_NUMBER = 10
  final val TORCHSCRIPT_DEBUG_ARENA_FIELD_NUMBER = 11
  def of(
    submodules: _root_.scala.Seq[torch.torch.ModuleDef],
    torchscriptArena: _root_.scala.Option[torch.torch.RecordRef],
    caffe2Nets: _root_.scala.Seq[caffe2.caffe2.NetDef],
    pickleArena: _root_.scala.Option[torch.torch.RecordRef],
    cppArena: _root_.scala.Option[torch.torch.RecordRef],
    parameters: _root_.scala.Seq[torch.torch.ParameterDef],
    name: _root_.scala.Option[_root_.scala.Predef.String],
    optimize: _root_.scala.Option[_root_.scala.Boolean],
    attributes: _root_.scala.Seq[torch.torch.AttributeDef],
    getStateAttributeId: _root_.scala.Option[_root_.scala.Long],
    torchscriptDebugArena: _root_.scala.Option[torch.torch.RecordRef]
  ): _root_.torch.torch.ModuleDef = _root_.torch.torch.ModuleDef(
    submodules,
    torchscriptArena,
    caffe2Nets,
    pickleArena,
    cppArena,
    parameters,
    name,
    optimize,
    attributes,
    getStateAttributeId,
    torchscriptDebugArena
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[torch.ModuleDef])
}
