// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package torch.torch

/** @param type
  *   The mypy type of this attribute
  * @param id
  *   Offset into attribute table
  */
@SerialVersionUID(0L)
final case class AttributeDef(
    `type`: _root_.scala.Predef.String,
    name: _root_.scala.Predef.String,
    id: _root_.scala.Long,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AttributeDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      
      {
        val __value = name
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      
      {
        val __value = id
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = `type`
        _output__.writeString(1, __v)
      };
      
      {
        val __v = name
        _output__.writeString(2, __v)
      };
      
      {
        val __v = id
        _output__.writeInt64(3, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withType(__v: _root_.scala.Predef.String): AttributeDef = copy(`type` = __v)
    def withName(__v: _root_.scala.Predef.String): AttributeDef = copy(name = __v)
    def withId(__v: _root_.scala.Long): AttributeDef = copy(id = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`
        case 2 => name
        case 3 => id
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(`type`)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PLong(id)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = torch.torch.AttributeDef
    // @@protoc_insertion_point(GeneratedMessage[torch.AttributeDef])
}

object AttributeDef extends scalapb.GeneratedMessageCompanion[torch.torch.AttributeDef] with scalapb.HasBuilder[torch.torch.AttributeDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[torch.torch.AttributeDef] with scalapb.HasBuilder[torch.torch.AttributeDef] = this
  def merge(`_message__`: torch.torch.AttributeDef, `_input__`: _root_.com.google.protobuf.CodedInputStream): torch.torch.AttributeDef = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[torch.torch.AttributeDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      torch.torch.AttributeDef(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Predef.String],
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TorchProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TorchProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = torch.torch.AttributeDef(
    `type` = "",
    name = "",
    id = 0L
  )
  final class Builder private (
    private var __type: _root_.scala.Predef.String,
    private var __name: _root_.scala.Predef.String,
    private var __id: _root_.scala.Long,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[torch.torch.AttributeDef] {
    private var __requiredFields0: _root_.scala.Long = 0x7L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __type = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __name = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __id = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): torch.torch.AttributeDef = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      torch.torch.AttributeDef(
        `type` = __type,
        name = __name,
        id = __id,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[torch.torch.AttributeDef, torch.torch.AttributeDef.Builder] {
    def apply(): Builder = new Builder(
      __type = "",
      __name = "",
      __id = 0L,
      `_unknownFields__` = null
    )
    def apply(`_message__`: torch.torch.AttributeDef): Builder = new Builder(
        __type = _message__.`type`,
        __name = _message__.name,
        __id = _message__.id,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = torch.torch.AttributeDef.Builder()
  def newBuilder(`_message__`: torch.torch.AttributeDef): Builder = torch.torch.AttributeDef.Builder(_message__)
  implicit class AttributeDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, torch.torch.AttributeDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, torch.torch.AttributeDef](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  def of(
    `type`: _root_.scala.Predef.String,
    name: _root_.scala.Predef.String,
    id: _root_.scala.Long
  ): _root_.torch.torch.AttributeDef = _root_.torch.torch.AttributeDef(
    `type`,
    name,
    id
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[torch.AttributeDef])
}
